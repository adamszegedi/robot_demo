<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="SeleniumLibrary" type="LIBRARY" format="HTML" scope="GLOBAL" generated="2023-07-18T17:52:06+00:00" specversion="5" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/__init__.py" lineno="57">
<version>6.1.0</version>
<doc>&lt;p&gt;SeleniumLibrary is a web testing library for Robot Framework.&lt;/p&gt;
&lt;p&gt;This document explains how to use keywords provided by SeleniumLibrary. For information about installation, support, and more, please visit the &lt;a href="https://github.com/robotframework/SeleniumLibrary"&gt;project pages&lt;/a&gt;. For more information about Robot Framework, see &lt;a href="http://robotframework.org"&gt;http://robotframework.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SeleniumLibrary uses the Selenium WebDriver modules internally to control a web browser. See &lt;a href="http://seleniumhq.org"&gt;http://seleniumhq.org&lt;/a&gt; for more information about Selenium in general and SeleniumLibrary README.rst &lt;a href="https://github.com/robotframework/SeleniumLibrary#browser-drivers"&gt;Browser drivers chapter&lt;/a&gt; for more details about WebDriver binary installation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Browser%20and%20Window" class="name"&gt;Browser and Window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Timeouts%2C%20waits%2C%20and%20delays" class="name"&gt;Timeouts, waits, and delays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Run-on-failure%20functionality" class="name"&gt;Run-on-failure functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EventFiringWebDriver" class="name"&gt;EventFiringWebDriver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Thread%20support" class="name"&gt;Thread support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Plugins" class="name"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Importing" class="name"&gt;Importing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Keywords" class="name"&gt;Keywords&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="Locating elements"&gt;Locating elements&lt;/h2&gt;
&lt;p&gt;All keywords in SeleniumLibrary that need to interact with an element on a web page take an argument typically named &lt;code&gt;locator&lt;/code&gt; that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but &lt;a href="#Using%20WebElements" class="name"&gt;using WebElements&lt;/a&gt; is possible too.&lt;/p&gt;
&lt;h3 id="Locator syntax"&gt;Locator syntax&lt;/h3&gt;
&lt;p&gt;SeleniumLibrary supports finding elements based on different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.&lt;/p&gt;
&lt;h4 id="Default locator strategy"&gt;Default locator strategy&lt;/h4&gt;
&lt;p&gt;By default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; attributes, but some keywords support additional attributes or other values that make sense in their context. For example, &lt;a href="#Click%20Link" class="name"&gt;Click Link&lt;/a&gt; supports the &lt;code&gt;href&lt;/code&gt; attribute and the link text and addition to the normal &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;# Match based on &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Link" class="name"&gt;Click Link&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;# Match also based on link text and &lt;code&gt;href&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Button" class="name"&gt;Click Button&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;# Match based on &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If a locator accidentally starts with a prefix recognized as &lt;a href="#Explicit%20locator%20strategy" class="name"&gt;explicit locator strategy&lt;/a&gt; or &lt;a href="#Implicit%20XPath%20strategy" class="name"&gt;implicit XPath strategy&lt;/a&gt;, it is possible to use the explicit &lt;code&gt;default&lt;/code&gt; prefix to enable the default strategy.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;name:foo&lt;/td&gt;
&lt;td&gt;# Find element with name &lt;code&gt;foo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;default:name:foo&lt;/td&gt;
&lt;td&gt;# Use default strategy with value &lt;code&gt;name:foo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;//foo&lt;/td&gt;
&lt;td&gt;# Find element using XPath &lt;code&gt;//foo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;default: //foo&lt;/td&gt;
&lt;td&gt;# Use default strategy with value &lt;code&gt;//foo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h4 id="Explicit locator strategy"&gt;Explicit locator strategy&lt;/h4&gt;
&lt;p&gt;The explicit locator strategy is specified with a prefix using either syntax &lt;code&gt;strategy:value&lt;/code&gt; or &lt;code&gt;strategy=value&lt;/code&gt;. The former syntax is preferred because the latter is identical to Robot Framework's &lt;a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax"&gt;named argument syntax&lt;/a&gt; and that can cause problems. Spaces around the separator are ignored, so &lt;code&gt;id:foo&lt;/code&gt;, &lt;code&gt;id: foo&lt;/code&gt; and &lt;code&gt;id : foo&lt;/code&gt; are all equivalent.&lt;/p&gt;
&lt;p&gt;Locator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register &lt;a href="#Custom%20locators" class="name"&gt;custom locators&lt;/a&gt;.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;Strategy&lt;/th&gt;
&lt;th&gt;Match based on&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;Element &lt;code&gt;id&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;id:example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt; attribute.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;name:example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;identifier&lt;/td&gt;
&lt;td&gt;Either &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;identifier:example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;Element &lt;code&gt;class&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class:example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;Tag name.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tag:div&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xpath&lt;/td&gt;
&lt;td&gt;XPath expression.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;xpath://div[@id="example"]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css&lt;/td&gt;
&lt;td&gt;CSS selector.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;css:div#example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dom&lt;/td&gt;
&lt;td&gt;DOM expression.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dom:document.images[5]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link&lt;/td&gt;
&lt;td&gt;Exact text a link has.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;link:The example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partial link&lt;/td&gt;
&lt;td&gt;Partial link text.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;partial link:he ex&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sizzle&lt;/td&gt;
&lt;td&gt;Sizzle selector deprecated.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizzle:div.example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Element &lt;code&gt;data-*&lt;/code&gt; attribute&lt;/td&gt;
&lt;td&gt;&lt;code&gt;data:id:my_id&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jquery&lt;/td&gt;
&lt;td&gt;jQuery expression.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jquery:div.example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;Keyword specific default behavior.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;default:example&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See the &lt;a href="#Default%20locator%20strategy" class="name"&gt;Default locator strategy&lt;/a&gt; section below for more information about how the default strategy works. Using the explicit &lt;code&gt;default&lt;/code&gt; prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.&lt;/p&gt;
&lt;p&gt;Different locator strategies have different pros and cons. Using ids, either explicitly like &lt;code&gt;id:foo&lt;/code&gt; or by using the &lt;a href="#Default%20locator%20strategy" class="name"&gt;default locator strategy&lt;/a&gt; simply like &lt;code&gt;foo&lt;/code&gt;, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;css&lt;/code&gt; strategy like &lt;code&gt;tag:h1&lt;/code&gt;, &lt;code&gt;class:example&lt;/code&gt; or &lt;code&gt;css:h1.example&lt;/code&gt; is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;id:foo&lt;/td&gt;
&lt;td&gt;# Element with id 'foo'.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:div#foo h1&lt;/td&gt;
&lt;td&gt;# h1 element under div with id 'foo'.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;xpath: //div[@id="foo"]//h1&lt;/td&gt;
&lt;td&gt;# Same as the above using XPath, not CSS.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;xpath: //*[contains(text(), "example")]&lt;/td&gt;
&lt;td&gt;# Element containing text 'example'.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;strategy:value&lt;/code&gt; syntax is only supported by SeleniumLibrary 3.0 and newer.&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;sizzle&lt;/code&gt; strategy or its alias &lt;code&gt;jquery&lt;/code&gt; requires that the system under test contains the jQuery library.&lt;/li&gt;
&lt;li&gt;Prior to SeleniumLibrary 3.0, table related keywords only supported &lt;code&gt;xpath&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;sizzle/jquery&lt;/code&gt; strategies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; strategy is conveniance locator that will construct xpath from the parameters. If you have element like &lt;span class="name"&gt;&amp;lt;div data-automation="automation-id-2"&amp;gt;&lt;/span&gt;, you locate the element via &lt;code&gt;data:automation:automation-id-2&lt;/code&gt;. This feature was added in SeleniumLibrary 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="Implicit XPath strategy"&gt;Implicit XPath strategy&lt;/h4&gt;
&lt;p&gt;If the locator starts with &lt;code&gt;//&lt;/code&gt;  or multiple opening parenthesis in front of the &lt;code&gt;//&lt;/code&gt;, the locator is considered to be an XPath expression. In other words, using &lt;code&gt;//div&lt;/code&gt; is equivalent to using explicit &lt;code&gt;xpath://div&lt;/code&gt; and &lt;code&gt;((//div))&lt;/code&gt; is equivalent to using explicit &lt;code&gt;xpath:((//div))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;//div[@id="foo"]//h1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;(//div)[2]&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The support for the &lt;code&gt;(//&lt;/code&gt; prefix is new in SeleniumLibrary 3.0. Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.&lt;/p&gt;
&lt;h4 id="Chaining locators"&gt;Chaining locators&lt;/h4&gt;
&lt;p&gt;It is possible chain multiple locators together as single locator. Each chained locator must start with locator strategy. Chained locators must be separated with single space, two greater than characters and followed with space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be used to specify multiple locators. This is useful, is some part of locator would match as the locator separator but it should not. Or if there is need to existing WebElement as locator.&lt;/p&gt;
&lt;p&gt;Although all locators support chaining, some locator strategies do not abey the chaining. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found be the previous locator. Chaining is supported by locator strategies which are based on Selenium API, like &lt;span class="name"&gt;xpath&lt;/span&gt; or &lt;span class="name"&gt;css&lt;/span&gt;, but example chaining is not supported by &lt;span class="name"&gt;sizzle&lt;/span&gt; or `jquery&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:.bar &amp;gt;&amp;gt; &lt;a href="xpath://a"&gt;xpath://a&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;# To find a link which is present after an element with class "bar"&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;List examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${locator_list} =&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Create List&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;css:div#div_id&lt;/td&gt;
&lt;td&gt;&lt;a href="xpath://*[text("&gt;xpath://*[text(&lt;/a&gt;), " &amp;gt;&amp;gt; "]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${locator_list}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${element} =&lt;/td&gt;
&lt;td&gt;Get WebElement&lt;/td&gt;
&lt;td&gt;&lt;a href="xpath://*[text("&gt;xpath://*[text(&lt;/a&gt;), " &amp;gt;&amp;gt; "]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${locator_list} =&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Create List&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;css:div#div_id&lt;/td&gt;
&lt;td&gt;${element}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${locator_list}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Chaining locators in new in SeleniumLibrary 5.0&lt;/p&gt;
&lt;h3 id="Using WebElements"&gt;Using WebElements&lt;/h3&gt;
&lt;p&gt;In addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the &lt;a href="#Get%20WebElement" class="name"&gt;Get WebElement&lt;/a&gt; keyword.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${elem} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20WebElement" class="name"&gt;Get WebElement&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;id:example&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${elem}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id="Custom locators"&gt;Custom locators&lt;/h3&gt;
&lt;p&gt;If more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Custom Locator Strategy&lt;/td&gt;
&lt;td&gt;[Arguments]&lt;/td&gt;
&lt;td&gt;${browser}&lt;/td&gt;
&lt;td&gt;${locator}&lt;/td&gt;
&lt;td&gt;${tag}&lt;/td&gt;
&lt;td&gt;${constraints}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;${element}=&lt;/td&gt;
&lt;td&gt;Execute Javascript&lt;/td&gt;
&lt;td&gt;return window.document.getElementById('${locator}');&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;[Return]&lt;/td&gt;
&lt;td&gt;${element}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This keyword is a reimplementation of the basic functionality of the &lt;code&gt;id&lt;/code&gt; locator where &lt;code&gt;${browser}&lt;/code&gt; is a reference to a WebDriver instance and &lt;code&gt;${locator}&lt;/code&gt; is the name of the locator strategy. To use this locator, it must first be registered by using the &lt;a href="#Add%20Location%20Strategy" class="name"&gt;Add Location Strategy&lt;/a&gt; keyword:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Location%20Strategy" class="name"&gt;Add Location Strategy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;custom&lt;/td&gt;
&lt;td&gt;Custom Locator Strategy&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first argument of &lt;a href="#Add%20Location%20Strategy" class="name"&gt;Add Location Strategy&lt;/a&gt; specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;custom:example&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See the &lt;a href="#Add%20Location%20Strategy" class="name"&gt;Add Location Strategy&lt;/a&gt; keyword for more details.&lt;/p&gt;
&lt;h2 id="Browser and Window"&gt;Browser and Window&lt;/h2&gt;
&lt;p&gt;There is different conceptual meaning when SeleniumLibrary talks about windows or browsers. This chapter explains those differences.&lt;/p&gt;
&lt;h3 id="Browser"&gt;Browser&lt;/h3&gt;
&lt;p&gt;When &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; or &lt;a href="#Create%20Webdriver" class="name"&gt;Create WebDriver&lt;/a&gt; keyword is called, it will create a new Selenium WebDriver instance by using the &lt;a href="https://www.seleniumhq.org/docs/03_webdriver.jsp"&gt;Selenium WebDriver&lt;/a&gt; API. In SeleniumLibrary terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; or &lt;a href="#Create%20Webdriver" class="name"&gt;Create WebDriver&lt;/a&gt; multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.&lt;/p&gt;
&lt;h3 id="Window"&gt;Window&lt;/h3&gt;
&lt;p&gt;Windows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In SeleniumLibrary browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example &lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt; keyword:&lt;/p&gt;
&lt;pre&gt;
&lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt;    window.open()    # Opens a new window with location about:blank
&lt;/pre&gt;
&lt;p&gt;The example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.&lt;/p&gt;
&lt;p&gt;Structure:&lt;/p&gt;
&lt;pre&gt;
BrowserA
           Window 1  (location=https://robotframework.org/)
           Window 2  (location=https://robocon.io/)
           Window 3  (location=https://github.com/robotframework/)

BrowserB
           Window 1  (location=https://github.com/)
&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://robotframework.org"&gt;https://robotframework.org&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${BROWSER}&lt;/td&gt;
&lt;td&gt;alias=BrowserA&lt;/td&gt;
&lt;td&gt;# BrowserA with first window is opened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;window.open()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# In BrowserA second window is opened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;locator=NEW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Switched to second window in BrowserA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Go%20To" class="name"&gt;Go To&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://robocon.io"&gt;https://robocon.io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Second window navigates to robocon site.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;window.open()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# In BrowserA third window is opened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${handle}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;locator=NEW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Switched to third window in BrowserA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Go%20To" class="name"&gt;Go To&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/robotframework/"&gt;https://github.com/robotframework/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Third windows goes to robot framework github site.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${BROWSER}&lt;/td&gt;
&lt;td&gt;alias=BrowserB&lt;/td&gt;
&lt;td&gt;# BrowserB with first windows is opened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${location}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Location" class="name"&gt;Get Location&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# ${location} is: &lt;a href="https://www.github.com"&gt;https://www.github.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${handle}&lt;/td&gt;
&lt;td&gt;browser=BrowserA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# BrowserA second windows is selected.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${location}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Location" class="name"&gt;Get Location&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# ${location} = &lt;a href="https://robocon.io/"&gt;https://robocon.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@{locations 1}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# By default, lists locations under the currectly active browser (BrowserA).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@{locations 2}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;browser=ALL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# By using browser=ALL argument keyword list all locations from all browsers.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above example, @{locations 1} contains the following items: &lt;a href="https://robotframework.org/"&gt;https://robotframework.org/&lt;/a&gt;, &lt;a href="https://robocon.io/"&gt;https://robocon.io/&lt;/a&gt; and &lt;a href="https://github.com/robotframework/"&gt;https://github.com/robotframework/&lt;/a&gt;'. The @{locations 2} contains the following items: &lt;a href="https://robotframework.org/"&gt;https://robotframework.org/&lt;/a&gt;, &lt;a href="https://robocon.io/"&gt;https://robocon.io/&lt;/a&gt;, &lt;a href="https://github.com/robotframework/"&gt;https://github.com/robotframework/&lt;/a&gt;' and '&lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="Timeouts, waits, and delays"&gt;Timeouts, waits, and delays&lt;/h2&gt;
&lt;p&gt;This section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; that can be used when setting various timeouts, waits, and delays.&lt;/p&gt;
&lt;h3 id="Timeout"&gt;Timeout&lt;/h3&gt;
&lt;p&gt;SeleniumLibrary contains various keywords that have an optional &lt;code&gt;timeout&lt;/code&gt; argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, &lt;code&gt;Wait ...&lt;/code&gt; keywords and keywords related to alerts. Additionally &lt;a href="#Execute%20Async%20Javascript" class="name"&gt;Execute Async Javascript&lt;/a&gt;. Although it does not have &lt;code&gt;timeout&lt;/code&gt;, argument, uses a timeout to define how long asynchronous JavaScript can run.&lt;/p&gt;
&lt;p&gt;The default timeout these keywords use can be set globally either by using the &lt;a href="#Set%20Selenium%20Timeout" class="name"&gt;Set Selenium Timeout&lt;/a&gt; keyword or with the &lt;code&gt;timeout&lt;/code&gt; argument when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library. If no default timeout is set globally, the default is 5 seconds. If None is specified for the timeout argument in the keywords, the default is used. See &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; below for supported timeout syntax.&lt;/p&gt;
&lt;h3 id="Implicit wait"&gt;Implicit wait&lt;/h3&gt;
&lt;p&gt;Implicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the &lt;a href="#Set%20Selenium%20Implicit%20Wait" class="name"&gt;Set Selenium Implicit Wait&lt;/a&gt; keyword or with the &lt;code&gt;implicit_wait&lt;/code&gt; argument when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library. See &lt;a href="https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp"&gt;Selenium documentation&lt;/a&gt; for more information about this functionality.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; below for supported syntax.&lt;/p&gt;
&lt;h3 id="Page load"&gt;Page load&lt;/h3&gt;
&lt;p&gt;Page load timeout is the amount of time to wait for page load to complete until error is raised.&lt;/p&gt;
&lt;p&gt;The default page load timeout can be set globally when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library with the &lt;code&gt;page_load_timeout&lt;/code&gt; argument or by using the &lt;a href="#Set%20Selenium%20Page%20Load%20Timeout" class="name"&gt;Set Selenium Page Load Timeout&lt;/a&gt; keyword.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; below for supported timeout syntax.&lt;/p&gt;
&lt;p&gt;Support for page load is new in SeleniumLibrary 6.1&lt;/p&gt;
&lt;h3 id="Selenium speed"&gt;Selenium speed&lt;/h3&gt;
&lt;p&gt;Selenium execution speed can be slowed down globally by using &lt;a href="#Set%20Selenium%20Speed" class="name"&gt;Set Selenium speed&lt;/a&gt; keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; below for supported syntax.&lt;/p&gt;
&lt;h3 id="Time format"&gt;Time format&lt;/h3&gt;
&lt;p&gt;All timeouts and waits can be given as numbers considered seconds (e.g. &lt;code&gt;0.5&lt;/code&gt; or &lt;code&gt;42&lt;/code&gt;) or in Robot Framework's time syntax (e.g. &lt;code&gt;1.5 seconds&lt;/code&gt; or &lt;code&gt;1 min 30 s&lt;/code&gt;). For more information about the time syntax see the &lt;a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format"&gt;Robot Framework User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="Run-on-failure functionality"&gt;Run-on-failure functionality&lt;/h2&gt;
&lt;p&gt;SeleniumLibrary has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the &lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt; keyword, but this can be changed either by using the &lt;a href="#Register%20Keyword%20To%20Run%20On%20Failure" class="name"&gt;Register Keyword To Run On Failure&lt;/a&gt; keyword or with the &lt;code&gt;run_on_failure&lt;/code&gt; argument when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library. It is possible to use any keyword from any imported library or resource file.&lt;/p&gt;
&lt;p&gt;The run-on-failure functionality can be disabled by using a special value &lt;code&gt;NOTHING&lt;/code&gt; or anything considered false (see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt;) such as &lt;code&gt;NONE&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="Boolean arguments"&gt;Boolean arguments&lt;/h2&gt;
&lt;p&gt;Starting from 5.0 SeleniumLibrary relies on Robot Framework to perform the boolean conversion based on keyword arguments &lt;a href="https://docs.python.org/3/library/typing.html"&gt;type hint&lt;/a&gt;. More details in Robot Framework &lt;a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions"&gt;user guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please note SeleniumLibrary 3 and 4 did have own custom methods to covert arguments to boolean values.&lt;/p&gt;
&lt;h2 id="EventFiringWebDriver"&gt;EventFiringWebDriver&lt;/h2&gt;
&lt;p&gt;The SeleniumLibrary offers support for &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver"&gt;EventFiringWebDriver&lt;/a&gt;. See the Selenium and SeleniumLibrary &lt;a href="https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#EventFiringWebDriver"&gt;EventFiringWebDriver support&lt;/a&gt; documentation for further details.&lt;/p&gt;
&lt;p&gt;EventFiringWebDriver is new in SeleniumLibrary 4.0&lt;/p&gt;
&lt;h2 id="Thread support"&gt;Thread support&lt;/h2&gt;
&lt;p&gt;SeleniumLibrary is not thread-safe. This is mainly due because the underlying &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe"&gt;Selenium tool is not thread-safe&lt;/a&gt; within one browser/driver instance. Because of the limitation in the Selenium side, the keywords or the API provided by the SeleniumLibrary is not thread-safe.&lt;/p&gt;
&lt;h2 id="Plugins"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;SeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal functionality without creating a new library or hacking the source code. See &lt;a href="https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#Plugins"&gt;plugin API&lt;/a&gt; documentation for further details.&lt;/p&gt;
&lt;p&gt;Plugin API is new SeleniumLibrary 4.0&lt;/p&gt;</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="441">
<arguments repr="timeout=0:00:05, implicit_wait=0:00:00, run_on_failure=Capture Page Screenshot, screenshot_root_directory: str | None = None, plugins: str | None = None, event_firing_webdriver: str | None = None, page_load_timeout=0:05:00, action_chain_delay=0:00:00.250000">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=0:00:05">
<name>timeout</name>
<default>0:00:05</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="implicit_wait=0:00:00">
<name>implicit_wait</name>
<default>0:00:00</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="run_on_failure=Capture Page Screenshot">
<name>run_on_failure</name>
<default>Capture Page Screenshot</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="screenshot_root_directory: str | None = None">
<name>screenshot_root_directory</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="plugins: str | None = None">
<name>plugins</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="event_firing_webdriver: str | None = None">
<name>event_firing_webdriver</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="page_load_timeout=0:05:00">
<name>page_load_timeout</name>
<default>0:05:00</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action_chain_delay=0:00:00.250000">
<name>action_chain_delay</name>
<default>0:00:00.250000</default>
</arg>
</arguments>
<doc>&lt;p&gt;SeleniumLibrary can be imported with several optional arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: Default value for &lt;span class="name"&gt;timeouts&lt;/span&gt; used with &lt;code&gt;Wait ...&lt;/code&gt; keywords.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;implicit_wait&lt;/code&gt;: Default value for &lt;a href="#Implicit%20wait" class="name"&gt;implicit wait&lt;/a&gt; used when locating elements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_on_failure&lt;/code&gt;: Default action for the &lt;a href="#Run-on-failure%20functionality" class="name"&gt;run-on-failure functionality&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screenshot_root_directory&lt;/code&gt;: Path to folder where possible screenshots are created or EMBED. See &lt;a href="#Set%20Screenshot%20Directory" class="name"&gt;Set Screenshot Directory&lt;/a&gt; keyword for further details about EMBED. If not given, the directory where the log file is written is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plugins&lt;/code&gt;: Allows extending the SeleniumLibrary with external Python classes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event_firing_webdriver&lt;/code&gt;: Class for wrapping Selenium with &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver"&gt;EventFiringWebDriver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page_load_timeout&lt;/code&gt;: Default value to wait for page load to complete until error is raised.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;action_chain_delay&lt;/code&gt;: Default value for &lt;span class="name"&gt;ActionChains&lt;/span&gt; delay to wait in between actions.&lt;/li&gt;
&lt;/ul&gt;</doc>
<shortdoc>SeleniumLibrary can be imported with several optional arguments.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add Cookie" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/cookie.py" lineno="143">
<arguments repr="name: str, value: str, path: str | None = None, domain: str | None = None, secure: bool | None = None, expiry: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name: str">
<name>name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="path: str | None = None">
<name>path</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="domain: str | None = None">
<name>domain</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="secure: bool | None = None">
<name>secure</name>
<type name="Union" union="true">bool | None<type name="bool" typedoc="boolean">bool</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="expiry: str | None = None">
<name>expiry</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Adds a cookie to your current session.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; are required, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;expiry&lt;/code&gt; are optional.  Expiry supports the same formats as the &lt;a href="http://robotframework.org/robotframework/latest/libraries/DateTime.html"&gt;DateTime&lt;/a&gt; library or an epoch timestamp.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Cookie" class="name"&gt;Add Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Cookie" class="name"&gt;Add Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;domain=example.com&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Cookie" class="name"&gt;Add Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;expiry=2027-09-28 16:21:35&lt;/td&gt;
&lt;td&gt;# Expiry as timestamp.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Cookie" class="name"&gt;Add Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;expiry=1822137695&lt;/td&gt;
&lt;td&gt;# Expiry as epoch seconds.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Prior to SeleniumLibrary 3.0 setting expiry did not work.&lt;/p&gt;</doc>
<shortdoc>Adds a cookie to your current session.</shortdoc>
</kw>
<kw name="Add Location Strategy" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1085">
<arguments repr="strategy_name: str, strategy_keyword: str, persist: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_name: str">
<name>strategy_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_keyword: str">
<name>strategy_keyword</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="persist: bool = False">
<name>persist</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Adds a custom location strategy.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Custom%20locators" class="name"&gt;Custom locators&lt;/a&gt; for information on how to create and use custom strategies. &lt;a href="#Remove%20Location%20Strategy" class="name"&gt;Remove Location Strategy&lt;/a&gt; can be used to remove a registered strategy.&lt;/p&gt;
&lt;p&gt;Location strategies are automatically removed after leaving the current scope by default. Setting &lt;code&gt;persist&lt;/code&gt; to a true value (see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt;) will cause the location strategy to stay registered throughout the life of the test.&lt;/p&gt;</doc>
<shortdoc>Adds a custom location strategy.</shortdoc>
</kw>
<kw name="Alert Should Be Present" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/alert.py" lineno="52">
<arguments repr="text: str = , action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="text: str = ">
<name>text</name>
<type name="str" typedoc="string">str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string">str</type>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that an alert is present and by default, accepts it.&lt;/p&gt;
&lt;p&gt;Fails if no alert is present. If &lt;code&gt;text&lt;/code&gt; is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the &lt;code&gt;action&lt;/code&gt; argument same way as with &lt;a href="#Handle%20Alert" class="name"&gt;Handle Alert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; specifies how long to wait for the alert to appear. If it is not given, the global default &lt;a href="#Timeout" class="name"&gt;timeout&lt;/a&gt; is used instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;action&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.&lt;/p&gt;</doc>
<shortdoc>Verifies that an alert is present and by default, accepts it.</shortdoc>
</kw>
<kw name="Alert Should Not Be Present" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/alert.py" lineno="79">
<arguments repr="action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string">str</type>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that no alert is present.&lt;/p&gt;
&lt;p&gt;If the alert actually exists, the &lt;code&gt;action&lt;/code&gt; argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the &lt;a href="#Handle%20Alert" class="name"&gt;Handle Alert&lt;/a&gt; keyword.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the &lt;a href="#Time%20format" class="name"&gt;time format&lt;/a&gt; section for information about the syntax.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Verifies that no alert is present.</shortdoc>
</kw>
<kw name="Assign Id To Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="221">
<arguments repr="locator: WebElement | str, id: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="id: str">
<name>id</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Assigns a temporary &lt;code&gt;id&lt;/code&gt; to the element specified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Assign%20Id%20To%20Element" class="name"&gt;Assign ID to Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;//ul[@class='example' and ./li[contains(., 'Stuff')]]&lt;/td&gt;
&lt;td&gt;my id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;my id&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Assigns a temporary ``id`` to the element specified by ``locator``.</shortdoc>
</kw>
<kw name="Capture Element Screenshot" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/screenshot.py" lineno="129">
<arguments repr="locator: WebElement | None | str, filename: str = selenium-element-screenshot-{index}.png">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str = selenium-element-screenshot-{index}.png">
<name>filename</name>
<type name="str" typedoc="string">str</type>
<default>selenium-element-screenshot-{index}.png</default>
</arg>
</arguments>
<doc>&lt;p&gt;Captures a screenshot from the element identified by &lt;code&gt;locator&lt;/code&gt; and embeds it into log file.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt; for details about &lt;code&gt;filename&lt;/code&gt; argument. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;An absolute path to the created element screenshot is returned.&lt;/p&gt;
&lt;p&gt;Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Element%20Screenshot" class="name"&gt;Capture Element Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;id:image_id&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Element%20Screenshot" class="name"&gt;Capture Element Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;id:image_id&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/id_image_id-1.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Element%20Screenshot" class="name"&gt;Capture Element Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;id:image_id&lt;/td&gt;
&lt;td&gt;EMBED&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Captures a screenshot from the element identified by ``locator`` and embeds it into log file.</shortdoc>
</kw>
<kw name="Capture Page Screenshot" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/screenshot.py" lineno="67">
<arguments repr="filename: str = selenium-screenshot-{index}.png">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str = selenium-screenshot-{index}.png">
<name>filename</name>
<type name="str" typedoc="string">str</type>
<default>selenium-screenshot-{index}.png</default>
</arg>
</arguments>
<doc>&lt;p&gt;Takes a screenshot of the current page and embeds it into a log file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filename&lt;/code&gt; argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library or by using the &lt;a href="#Set%20Screenshot%20Directory" class="name"&gt;Set Screenshot Directory&lt;/a&gt; keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;filename&lt;/code&gt; equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 1.8, if &lt;code&gt;filename&lt;/code&gt; contains marker &lt;code&gt;{index}&lt;/code&gt;, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's &lt;a href="https://docs.python.org/3/library/string.html#format-string-syntax"&gt;format string syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An absolute path to the created screenshot file is returned or if &lt;code&gt;filename&lt;/code&gt;  equals to EMBED, word &lt;span class="name"&gt;EMBED&lt;/span&gt; is returned.&lt;/p&gt;
&lt;p&gt;Support for EMBED is new in SeleniumLibrary 4.2&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/selenium-screenshot-1.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${path} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/selenium-screenshot-2.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${path}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;custom_name.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/custom_name.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;custom_with_index_{index}.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/custom_with_index_1.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;formatted_index_{index:03}.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${OUTPUTDIR}/formatted_index_001.png&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;EMBED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;File Should Not Exist&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;EMBED&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Takes a screenshot of the current page and embeds it into a log file.</shortdoc>
</kw>
<kw name="Checkbox Should Be Selected" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="44">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies checkbox &lt;code&gt;locator&lt;/code&gt; is selected/checked.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies checkbox ``locator`` is selected/checked.</shortdoc>
</kw>
<kw name="Checkbox Should Not Be Selected" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="58">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies checkbox &lt;code&gt;locator&lt;/code&gt; is not selected/checked.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies checkbox ``locator`` is not selected/checked.</shortdoc>
</kw>
<kw name="Choose File" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="216">
<arguments repr="locator: WebElement | str, file_path: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="file_path: str">
<name>file_path</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Inputs the &lt;code&gt;file_path&lt;/code&gt; into the file input field &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This keyword is most often used to input files into upload forms. The keyword does not check &lt;code&gt;file_path&lt;/code&gt; is the file or folder available on the machine where tests are executed. If the &lt;code&gt;file_path&lt;/code&gt; points at a file and when using Selenium Grid, Selenium will &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE"&gt;magically&lt;/a&gt;, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.&lt;/p&gt;
&lt;p&gt;That &lt;code&gt;file_path&lt;/code&gt; is not checked, is new in SeleniumLibrary 4.0.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Choose%20File" class="name"&gt;Choose File&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;my_upload_field&lt;/td&gt;
&lt;td&gt;${CURDIR}/trades.csv&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Inputs the ``file_path`` into the file input field ``locator``.</shortdoc>
</kw>
<kw name="Clear Element Text" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="523">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Clears the value of the text-input-element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Clears the value of the text-input-element identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="546">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">bool | str<type name="bool" typedoc="boolean">bool</type><type name="str" typedoc="string">str</type></type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Clicks the button identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, buttons are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt; keyword for details about the &lt;code&gt;modifier&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;modifier&lt;/code&gt; argument is new in SeleniumLibrary 3.3&lt;/p&gt;</doc>
<shortdoc>Clicks the button identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="616">
<arguments repr="locator: WebElement | str, modifier: bool | str = False, action_chain: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">bool | str<type name="bool" typedoc="boolean">bool</type><type name="str" typedoc="string">str</type></type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action_chain: bool = False">
<name>action_chain</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Click the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;modifier&lt;/code&gt; argument can be used to pass &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys"&gt;Selenium Keys&lt;/a&gt; when clicking the element. The &lt;span class="name"&gt;+&lt;/span&gt; can be used as a separator for different Selenium Keys. The &lt;span class="name"&gt;CTRL&lt;/span&gt; is internally translated to the &lt;span class="name"&gt;CONTROL&lt;/span&gt; key. The &lt;code&gt;modifier&lt;/code&gt; is space and case insensitive, example "alt" and " aLt " are supported formats to &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT"&gt;ALT key&lt;/a&gt; . If &lt;code&gt;modifier&lt;/code&gt; does not match to Selenium Keys, keyword fails.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;action_chain&lt;/code&gt; argument is true, see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &amp;lt;web_element&amp;gt;.click() function. If both &lt;code&gt;action_chain&lt;/code&gt; and &lt;code&gt;modifier&lt;/code&gt; are defined, the click will be performed using &lt;code&gt;modifier&lt;/code&gt; and &lt;code&gt;action_chain&lt;/code&gt; will be ignored.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Click Element&lt;/td&gt;
&lt;td&gt;id:button&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Would click element without any modifiers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Click Element&lt;/td&gt;
&lt;td&gt;id:button&lt;/td&gt;
&lt;td&gt;CTRL&lt;/td&gt;
&lt;td&gt;# Would click element with CTLR key pressed down.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Click Element&lt;/td&gt;
&lt;td&gt;id:button&lt;/td&gt;
&lt;td&gt;CTRL+ALT&lt;/td&gt;
&lt;td&gt;# Would click element with CTLR and ALT keys pressed down.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Click Element&lt;/td&gt;
&lt;td&gt;id:button&lt;/td&gt;
&lt;td&gt;action_chain=True&lt;/td&gt;
&lt;td&gt;# Clicks the button using an Selenium  ActionChains&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;modifier&lt;/code&gt; argument is new in SeleniumLibrary 3.2 The &lt;code&gt;action_chain&lt;/code&gt; argument is new in SeleniumLibrary 4.1&lt;/p&gt;</doc>
<shortdoc>Click the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Element At Coordinates" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="684">
<arguments repr="locator: WebElement | str, xoffset: int, yoffset: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xoffset: int">
<name>xoffset</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="yoffset: int">
<name>yoffset</name>
<type name="int" typedoc="integer">int</type>
</arg>
</arguments>
<doc>&lt;p&gt;Click the element &lt;code&gt;locator&lt;/code&gt; at &lt;code&gt;xoffset/yoffset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Click the element ``locator`` at ``xoffset/yoffset``.</shortdoc>
</kw>
<kw name="Click Image" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="570">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">bool | str<type name="bool" typedoc="boolean">bool</type><type name="str" typedoc="string">str</type></type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Clicks an image identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, images are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt; keyword for details about the &lt;code&gt;modifier&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;modifier&lt;/code&gt; argument is new in SeleniumLibrary 3.3&lt;/p&gt;</doc>
<shortdoc>Clicks an image identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Link" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="595">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">bool | str<type name="bool" typedoc="boolean">bool</type><type name="str" typedoc="string">str</type></type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Clicks a link identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, links are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;href&lt;/code&gt; and the link text.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Click%20Element" class="name"&gt;Click Element&lt;/a&gt; keyword for details about the &lt;code&gt;modifier&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;modifier&lt;/code&gt; argument is new in SeleniumLibrary 3.3&lt;/p&gt;</doc>
<shortdoc>Clicks a link identified by ``locator``.</shortdoc>
</kw>
<kw name="Close All Browsers" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="40">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Closes all open browsers and resets the browser cache.&lt;/p&gt;
&lt;p&gt;After this keyword, new indexes returned from &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; keyword are reset to 1.&lt;/p&gt;
&lt;p&gt;This keyword should be used in test or suite teardown to make sure all browsers are closed.&lt;/p&gt;</doc>
<shortdoc>Closes all open browsers and resets the browser cache.</shortdoc>
</kw>
<kw name="Close Browser" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="53">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Closes the current browser.&lt;/p&gt;</doc>
<shortdoc>Closes the current browser.</shortdoc>
</kw>
<kw name="Close Window" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="125">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Closes currently opened and selected browser window/tab.&lt;/p&gt;</doc>
<shortdoc>Closes currently opened and selected browser window/tab.</shortdoc>
</kw>
<kw name="Cover Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="473">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Will cover elements identified by &lt;code&gt;locator&lt;/code&gt; with a blue div without breaking page layout.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.3.0&lt;/p&gt;
&lt;p&gt;Example: |&lt;a href="#Cover%20Element" class="name"&gt;Cover Element&lt;/a&gt; | css:div#container |&lt;/p&gt;</doc>
<shortdoc>Will cover elements identified by ``locator`` with a blue div without breaking page layout.</shortdoc>
</kw>
<kw name="Create Webdriver" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="345">
<arguments repr="driver_name: str, alias: str | None = None, kwargs={}, **init_kwargs">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="driver_name: str">
<name>driver_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="kwargs={}">
<name>kwargs</name>
<default>{}</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**init_kwargs">
<name>init_kwargs</name>
</arg>
</arguments>
<doc>&lt;p&gt;Creates an instance of Selenium WebDriver.&lt;/p&gt;
&lt;p&gt;Like &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; is not adequate.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;driver_name&lt;/code&gt; must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.&lt;/p&gt;
&lt;p&gt;The initialized WebDriver can be configured either with a Python dictionary &lt;code&gt;kwargs&lt;/code&gt; or by using keyword arguments &lt;code&gt;**init_kwargs&lt;/code&gt;. These arguments are passed directly to WebDriver without any processing. See &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/api.html"&gt;Selenium API documentation&lt;/a&gt; for details about the supported arguments.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;# Use proxy with Firefox&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${proxy}=&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Evaluate&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;selenium.webdriver.Proxy()&lt;/td&gt;
&lt;td&gt;modules=selenium, selenium.webdriver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${proxy.http_proxy}=&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Set Variable&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;localhost:8888&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Create%20Webdriver" class="name"&gt;Create Webdriver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;proxy=${proxy}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# Use proxy with PhantomJS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${service args}=&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Create List&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;--proxy=192.168.132.104:8888&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Create%20Webdriver" class="name"&gt;Create Webdriver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PhantomJS&lt;/td&gt;
&lt;td&gt;service_args=${service args}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when &lt;a href="#Close%20All%20Browsers" class="name"&gt;Close All Browsers&lt;/a&gt; keyword is used. See &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt; for an example.&lt;/p&gt;</doc>
<shortdoc>Creates an instance of Selenium WebDriver.</shortdoc>
</kw>
<kw name="Current Frame Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/frames.py" lineno="53">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the current frame contains &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Prior to SeleniumLibrary 3.0 this keyword was named &lt;span class="name"&gt;Current Frame Contains&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Verifies that the current frame contains ``text``.</shortdoc>
</kw>
<kw name="Current Frame Should Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/frames.py" lineno="70">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the current frame does not contain &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies that the current frame does not contain ``text``.</shortdoc>
</kw>
<kw name="Delete All Cookies" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/cookie.py" lineno="57">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Deletes all cookies.&lt;/p&gt;</doc>
<shortdoc>Deletes all cookies.</shortdoc>
</kw>
<kw name="Delete Cookie" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/cookie.py" lineno="62">
<arguments repr="name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
</arguments>
<doc>&lt;p&gt;Deletes the cookie matching &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the cookie is not found, nothing happens.&lt;/p&gt;</doc>
<shortdoc>Deletes the cookie matching ``name``.</shortdoc>
</kw>
<kw name="Double Click Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="706">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Double clicks the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Double clicks the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Drag And Drop" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="742">
<arguments repr="locator: WebElement | str, target: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target: WebElement | str">
<name>target</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Drags the element identified by &lt;code&gt;locator&lt;/code&gt; into the &lt;code&gt;target&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;locator&lt;/code&gt; argument is the locator of the dragged element and the &lt;code&gt;target&lt;/code&gt; is the locator of the target. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Drag%20And%20Drop" class="name"&gt;Drag And Drop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:div#element&lt;/td&gt;
&lt;td&gt;css:div.target&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Drags the element identified by ``locator`` into the ``target`` element.</shortdoc>
</kw>
<kw name="Drag And Drop By Offset" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="760">
<arguments repr="locator: WebElement | str, xoffset: int, yoffset: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xoffset: int">
<name>xoffset</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="yoffset: int">
<name>yoffset</name>
<type name="int" typedoc="integer">int</type>
</arg>
</arguments>
<doc>&lt;p&gt;Drags the element identified with &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;xoffset/yoffset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The element will be moved by &lt;code&gt;xoffset&lt;/code&gt; and &lt;code&gt;yoffset&lt;/code&gt;, each of which is a negative or positive number specifying the offset.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Drag%20And%20Drop%20By%20Offset" class="name"&gt;Drag And Drop By Offset&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;myElem&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;-35&lt;/td&gt;
&lt;td&gt;# Move myElem 50px right and 35px down&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Drags the element identified with ``locator`` by ``xoffset/yoffset``.</shortdoc>
</kw>
<kw name="Element Attribute Value Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="413">
<arguments repr="locator: WebElement | str, attribute: str, expected: None | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies element identified by &lt;code&gt;locator&lt;/code&gt; contains expected attribute value.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="#Element%20Attribute%20Value%20Should%20Be" class="name"&gt;Element Attribute Value Should Be&lt;/a&gt; | css:img | href | value&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.2.&lt;/p&gt;</doc>
<shortdoc>Verifies element identified by ``locator`` contains expected attribute value.</shortdoc>
</kw>
<kw name="Element Should Be Disabled" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="240">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element identified by &lt;code&gt;locator&lt;/code&gt; is disabled.&lt;/p&gt;
&lt;p&gt;This keyword considers also elements that are read-only to be disabled.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies that element identified by ``locator`` is disabled.</shortdoc>
</kw>
<kw name="Element Should Be Enabled" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="253">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element identified by &lt;code&gt;locator&lt;/code&gt; is enabled.&lt;/p&gt;
&lt;p&gt;This keyword considers also elements that are read-only to be disabled.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies that element identified by ``locator`` is enabled.</shortdoc>
</kw>
<kw name="Element Should Be Focused" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="266">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element identified by &lt;code&gt;locator&lt;/code&gt; is focused.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Verifies that element identified by ``locator`` is focused.</shortdoc>
</kw>
<kw name="Element Should Be Visible" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="283">
<arguments repr="locator: WebElement | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the element identified by &lt;code&gt;locator&lt;/code&gt; is visible.&lt;/p&gt;
&lt;p&gt;Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries &lt;code&gt;display:none&lt;/code&gt; is not logically visible, so using this keyword on that element would fail.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Verifies that the element identified by ``locator`` is visible.</shortdoc>
</kw>
<kw name="Element Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="54">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ignore_case&lt;/code&gt; argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ignore_case&lt;/code&gt; argument is new in SeleniumLibrary 3.1.&lt;/p&gt;
&lt;p&gt;Use &lt;a href="#Element%20Text%20Should%20Be" class="name"&gt;Element Text Should Be&lt;/a&gt; if you want to match the exact text, not a substring.&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Element Should Not Be Visible" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="306">
<arguments repr="locator: WebElement | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the element identified by &lt;code&gt;locator&lt;/code&gt; is NOT visible.&lt;/p&gt;
&lt;p&gt;Passes if the element does not exists. See &lt;a href="#Element%20Should%20Be%20Visible" class="name"&gt;Element Should Be Visible&lt;/a&gt; for more information about visibility and supported arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies that the element identified by ``locator`` is NOT visible.</shortdoc>
</kw>
<kw name="Element Should Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="92">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; does not contain text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ignore_case&lt;/code&gt; argument can be set to True to compare case insensitive, default is False.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ignore_case&lt;/code&gt; argument new in SeleniumLibrary 3.1.&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` does not contain text ``expected``.</shortdoc>
</kw>
<kw name="Element Text Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="325">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; contains exact the text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ignore_case&lt;/code&gt; argument can be set to True to compare case insensitive, default is False.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ignore_case&lt;/code&gt; argument is new in SeleniumLibrary 3.1.&lt;/p&gt;
&lt;p&gt;Use &lt;a href="#Element%20Should%20Contain" class="name"&gt;Element Should Contain&lt;/a&gt; if a substring match is desired.&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` contains exact the text ``expected``.</shortdoc>
</kw>
<kw name="Element Text Should Not Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="361">
<arguments repr="locator: WebElement | str, not_expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="not_expected: None | str">
<name>not_expected</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; does not contain exact the text &lt;code&gt;not_expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ignore_case&lt;/code&gt; argument can be set to True to compare case insensitive, default is False.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.1.1&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` does not contain exact the text ``not_expected``.</shortdoc>
</kw>
<kw name="Execute Async Javascript" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/javascript.py" lineno="76">
<arguments repr="*code: WebElement | str">
<arg kind="VAR_POSITIONAL" required="false" repr="*code: WebElement | str">
<name>code</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Executes asynchronous JavaScript code with possible arguments.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt; except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.&lt;/p&gt;
&lt;p&gt;Scripts must complete within the script timeout or this keyword will fail. See the &lt;a href="#Timeout" class="name"&gt;Timeout&lt;/a&gt; section for more information.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script"&gt;arguments&lt;/a&gt; as part of &lt;code&gt;code&lt;/code&gt; argument. See &lt;a href="#Execute%20Javascript" class="name"&gt;Execute Javascript&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Async%20Javascript" class="name"&gt;Execute Async JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Async%20Javascript" class="name"&gt;Execute Async JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${CURDIR}/async_js_to_execute.js&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${result} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Execute%20Async%20Javascript" class="name"&gt;Execute Async JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;var callback = arguments[arguments.length - 1];&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;function answer(){callback("text");};&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;window.setTimeout(answer, 2000);&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Should Be Equal&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${result}&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Executes asynchronous JavaScript code with possible arguments.</shortdoc>
</kw>
<kw name="Execute Javascript" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/javascript.py" lineno="33">
<arguments repr="*code: WebElement | str">
<arg kind="VAR_POSITIONAL" required="false" repr="*code: WebElement | str">
<name>code</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Executes the given JavaScript code with possible arguments.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;code&lt;/code&gt; may be divided into multiple cells in the test data and &lt;code&gt;code&lt;/code&gt; may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;code&lt;/code&gt; is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.&lt;/p&gt;
&lt;p&gt;The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use &lt;code&gt;window&lt;/code&gt; to refer to the window of your application and &lt;code&gt;document&lt;/code&gt; to refer to the document object of the current frame or window, e.g. &lt;code&gt;document.getElementById('example')&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script"&gt;arguments&lt;/a&gt; as part of &lt;code&gt;code&lt;/code&gt; argument. The JavaScript code and arguments must be separated with &lt;span class="name"&gt;JAVASCRIPT&lt;/span&gt; and &lt;span class="name"&gt;ARGUMENTS&lt;/span&gt; markers and must be used exactly with this format. If the Javascript code is first, then the &lt;span class="name"&gt;JAVASCRIPT&lt;/span&gt; marker is optional. The order of &lt;span class="name"&gt;JAVASCRIPT&lt;/span&gt; and &lt;span class="name"&gt;ARGUMENTS&lt;/span&gt; markers can be swapped, but if &lt;span class="name"&gt;ARGUMENTS&lt;/span&gt; is the first marker, then &lt;span class="name"&gt;JAVASCRIPT&lt;/span&gt; marker is mandatory. It is only allowed to use &lt;span class="name"&gt;JAVASCRIPT&lt;/span&gt; and &lt;span class="name"&gt;ARGUMENTS&lt;/span&gt; markers only one time in the &lt;code&gt;code&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;window.myFunc('arg1', 'arg2')&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${CURDIR}/js_to_execute.js&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;alert(arguments[0]);&lt;/td&gt;
&lt;td&gt;ARGUMENTS&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Execute%20Javascript" class="name"&gt;Execute JavaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ARGUMENTS&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;JAVASCRIPT&lt;/td&gt;
&lt;td&gt;alert(arguments[0]);&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Executes the given JavaScript code with possible arguments.</shortdoc>
</kw>
<kw name="Frame Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/frames.py" lineno="84">
<arguments repr="locator: WebElement | str, text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that frame identified by &lt;code&gt;locator&lt;/code&gt; contains &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies that frame identified by ``locator`` contains ``text``.</shortdoc>
</kw>
<kw name="Get Action Chain Delay" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="725">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Gets the currently stored value for chain_delay_value in timestr format.&lt;/p&gt;</doc>
<shortdoc>Gets the currently stored value for chain_delay_value in timestr format.</shortdoc>
</kw>
<kw name="Get All Links" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="964">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns a list containing ids of all links found in current page.&lt;/p&gt;
&lt;p&gt;If a link has no id, an empty string will be in the list instead.&lt;/p&gt;</doc>
<shortdoc>Returns a list containing ids of all links found in current page.</shortdoc>
</kw>
<kw name="Get Browser Aliases" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="457">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary &lt;code&gt;${aliases.key}&lt;/code&gt; or as list &lt;code&gt;@{aliases}[0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://example.com"&gt;https://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;alias=BrowserA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://example.com"&gt;https://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;alias=BrowserB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;{aliases}&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Browser%20Aliases" class="name"&gt;Get Browser Aliases&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# &amp;amp;{aliases} = { BrowserA=1|BrowserB=2 }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Log&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${aliases.BrowserA}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# logs &lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FOR&lt;/td&gt;
&lt;td&gt;${alias}&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;@{aliases}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="name"&gt;Log&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${alias}&lt;/td&gt;
&lt;td&gt;# logs &lt;code&gt;BrowserA&lt;/code&gt; and &lt;code&gt;BrowserB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;END&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.0&lt;/p&gt;</doc>
<shortdoc>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.</shortdoc>
</kw>
<kw name="Get Browser Ids" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="440">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns index of all active browser as list.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;@{browser_ids}=&lt;/td&gt;
&lt;td&gt;Get Browser Ids&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FOR&lt;/td&gt;
&lt;td&gt;${id}&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;@{browser_ids}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;@{window_titles}=&lt;/td&gt;
&lt;td&gt;Get Window Titles&lt;/td&gt;
&lt;td&gt;browser=${id}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;Browser ${id} has these windows: ${window_titles}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;END&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.0&lt;/p&gt;</doc>
<shortdoc>Returns index of all active browser as list.</shortdoc>
</kw>
<kw name="Get Cookie" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/cookie.py" lineno="97">
<arguments repr="name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name: str">
<name>name</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns information of cookie with &lt;code&gt;name&lt;/code&gt; as an object.&lt;/p&gt;
&lt;p&gt;If no cookie is found with &lt;code&gt;name&lt;/code&gt;, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of a cookie.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Value of the cookie.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td&gt;Indicates a URL path, for example &lt;code&gt;/&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;The domain, the cookie is visible to.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;secure&lt;/td&gt;
&lt;td&gt;When true, the cookie is only used with HTTPS connections.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;httpOnly&lt;/td&gt;
&lt;td&gt;When true, the cookie is not accessible via JavaScript.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expiry&lt;/td&gt;
&lt;td&gt;Python datetime object indicating when the cookie expires.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extra&lt;/td&gt;
&lt;td&gt;Possible attributes outside of the WebDriver specification&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See the &lt;a href="https://w3c.github.io/webdriver/#cookies"&gt;WebDriver specification&lt;/a&gt; for details about the cookie information. Notice that &lt;code&gt;expiry&lt;/code&gt; is specified as a &lt;a href="https://docs.python.org/3/library/datetime.html#datetime.datetime"&gt;datetime object&lt;/a&gt;, not as seconds since Unix Epoch like WebDriver natively does.&lt;/p&gt;
&lt;p&gt;In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the &lt;a href="https://w3c.github.io/webdriver/#cookies"&gt;WebDriver specification&lt;/a&gt;. These other attributes are available in an &lt;code&gt;extra&lt;/code&gt; attribute in the cookie object and it contains a dictionary of the other attributes. The &lt;code&gt;extra&lt;/code&gt; attribute is new in SeleniumLibrary 4.0.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Add%20Cookie" class="name"&gt;Add Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${cookie} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Cookie" class="name"&gt;Get Cookie&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Should Be Equal&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${cookie.name}&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Should Be Equal&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${cookie.value}&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Should Be True&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${cookie.expiry.year} &amp;gt; 2017&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Returns information of cookie with ``name`` as an object.</shortdoc>
</kw>
<kw name="Get Cookies" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/cookie.py" lineno="70">
<arguments repr="as_dict: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="as_dict: bool = False">
<name>as_dict</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns all cookies of the current page.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;as_dict&lt;/code&gt; argument evaluates as false, see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; for more details, then cookie information is returned as a single string in format &lt;code&gt;name1=value1; name2=value2; name3=value3&lt;/code&gt;. When &lt;code&gt;as_dict&lt;/code&gt; argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.&lt;/p&gt;
&lt;p&gt;The &lt;span class="name"&gt;` as_dict&lt;/span&gt;` argument is new in SeleniumLibrary 3.3&lt;/p&gt;</doc>
<shortdoc>Returns all cookies of the current page.</shortdoc>
</kw>
<kw name="Get Element Attribute" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="395">
<arguments repr="locator: WebElement | str, attribute: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the value of &lt;code&gt;attribute&lt;/code&gt; from the element &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${id}=&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Element%20Attribute" class="name"&gt;Get Element Attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:h1&lt;/td&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Passing attribute name as part of the &lt;code&gt;locator&lt;/code&gt; was removed in SeleniumLibrary 3.2. The explicit &lt;code&gt;attribute&lt;/code&gt; argument should be used instead.&lt;/p&gt;</doc>
<shortdoc>Returns the value of ``attribute`` from the element ``locator``.</shortdoc>
</kw>
<kw name="Get Element Count" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1069">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the number of elements matching &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you wish to assert the number of matching elements, use &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; with &lt;code&gt;limit&lt;/code&gt; argument. Keyword will always return an integer.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${count} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Element%20Count" class="name"&gt;Get Element Count&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;name:div_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Should Be True&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;${count} &amp;gt; 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Returns the number of elements matching ``locator``.</shortdoc>
</kw>
<kw name="Get Element Size" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="458">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns width and height of the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Both width and height are returned as integers.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${width}&lt;/td&gt;
&lt;td&gt;${height} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Element%20Size" class="name"&gt;Get Element Size&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:div#container&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Returns width and height of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Horizontal Position" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="444">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the horizontal position of the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The position is returned in pixels off the left side of the page, as an integer.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#Get%20Vertical%20Position" class="name"&gt;Get Vertical Position&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns the horizontal position of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get List Items" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="27">
<arguments repr="locator: WebElement | str, values: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="values: bool = False">
<name>values</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns all labels or values of selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Returns visible labels by default, but values can be returned by setting the &lt;code&gt;values&lt;/code&gt; argument to a true value (see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${labels} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20List%20Items" class="name"&gt;Get List Items&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;mylist&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${values} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20List%20Items" class="name"&gt;Get List Items&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;css:#example select&lt;/td&gt;
&lt;td&gt;values=True&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Support to return values is new in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Returns all labels or values of selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Location" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="496">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns the current browser window URL.&lt;/p&gt;</doc>
<shortdoc>Returns the current browser window URL.</shortdoc>
</kw>
<kw name="Get Locations" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="166">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns and logs URLs of all windows of the selected browser.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Browser Scope:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;browser&lt;/code&gt; argument specifies the browser that shall return its windows information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browser&lt;/code&gt; can be &lt;code&gt;index_or_alias&lt;/code&gt; like in &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;browser&lt;/code&gt; is &lt;code&gt;CURRENT&lt;/code&gt; (default, case-insensitive) the currently active browser is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;browser&lt;/code&gt; is &lt;code&gt;ALL&lt;/code&gt; (case-insensitive) the window information of all windows of all opened browsers are returned.&lt;/li&gt;
&lt;/ul&gt;</doc>
<shortdoc>Returns and logs URLs of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Selected List Label" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="52">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the label of selected option from selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there are multiple selected options, the label of the first option is returned.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns the label of selected option from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Labels" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="65">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns labels of selected options from selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns labels of selected options from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Value" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="78">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the value of selected option from selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there are multiple selected options, the value of the first option is returned.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns the value of selected option from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Values" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="91">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns values of selected options from selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns values of selected options from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selenium Implicit Wait" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="618">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Gets the implicit wait value used by Selenium.&lt;/p&gt;
&lt;p&gt;The value is returned as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Implicit%20wait" class="name"&gt;Implicit wait&lt;/a&gt; section above for more information.&lt;/p&gt;</doc>
<shortdoc>Gets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Get Selenium Page Load Timeout" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="628">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Gets the timeout to wait for a page load to complete before throwing an error.&lt;/p&gt;
&lt;p&gt;The value is returned as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Page%20load" class="name"&gt;Page load&lt;/a&gt; section above for more information.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 6.1&lt;/p&gt;</doc>
<shortdoc>Gets the timeout to wait for a page load to complete before throwing an error.</shortdoc>
</kw>
<kw name="Get Selenium Speed" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="598">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Gets the delay that is waited after each Selenium command.&lt;/p&gt;
&lt;p&gt;The value is returned as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Selenium%20speed" class="name"&gt;Selenium Speed&lt;/a&gt; section above for more information.&lt;/p&gt;</doc>
<shortdoc>Gets the delay that is waited after each Selenium command.</shortdoc>
</kw>
<kw name="Get Selenium Timeout" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="608">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Gets the timeout that is used by various keywords.&lt;/p&gt;
&lt;p&gt;The value is returned as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Timeout" class="name"&gt;Timeout&lt;/a&gt; section above for more information.&lt;/p&gt;</doc>
<shortdoc>Gets the timeout that is used by various keywords.</shortdoc>
</kw>
<kw name="Get Session Id" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="478">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns the currently active browser session id.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.2&lt;/p&gt;</doc>
<shortdoc>Returns the currently active browser session id.</shortdoc>
</kw>
<kw name="Get Source" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="486">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns the entire HTML source of the current page or frame.&lt;/p&gt;</doc>
<shortdoc>Returns the entire HTML source of the current page or frame.</shortdoc>
</kw>
<kw name="Get Table Cell" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="26">
<arguments repr="locator: WebElement | None | str, row: int, column: int, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns contents of a table cell.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument and its cell found using &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.&lt;/p&gt;
&lt;p&gt;All &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; elements anywhere in the table are considered to be cells.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Returns contents of a table cell.</shortdoc>
</kw>
<kw name="Get Text" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="514">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the text value of the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns the text value of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Title" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="491">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns the title of the current page.&lt;/p&gt;</doc>
<shortdoc>Returns the title of the current page.</shortdoc>
</kw>
<kw name="Get Value" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="505">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the value attribute of the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns the value attribute of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Vertical Position" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="532">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the vertical position of the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The position is returned in pixels off the top of the page, as an integer.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#Get%20Horizontal%20Position" class="name"&gt;Get Horizontal Position&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns the vertical position of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get WebElement" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="32">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns the first WebElement matching the given &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Returns the first WebElement matching the given ``locator``.</shortdoc>
</kw>
<kw name="Get WebElements" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="41">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns a list of WebElement objects matching the &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.&lt;/p&gt;</doc>
<shortdoc>Returns a list of WebElement objects matching the ``locator``.</shortdoc>
</kw>
<kw name="Get Window Handles" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="130">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns all child window handles of the selected browser as a list.&lt;/p&gt;
&lt;p&gt;Can be used as a list of windows to exclude with &lt;span class="name"&gt;Select Window&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;How to select the &lt;code&gt;browser&lt;/code&gt; scope of this keyword, see &lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Prior to SeleniumLibrary 3.0, this keyword was named &lt;span class="name"&gt;List Windows&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns all child window handles of the selected browser as a list.</shortdoc>
</kw>
<kw name="Get Window Identifiers" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="142">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns and logs id attributes of all windows of the selected browser.&lt;/p&gt;
&lt;p&gt;How to select the &lt;code&gt;browser&lt;/code&gt; scope of this keyword, see &lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns and logs id attributes of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Window Names" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="150">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns and logs names of all windows of the selected browser.&lt;/p&gt;
&lt;p&gt;How to select the &lt;code&gt;browser&lt;/code&gt; scope of this keyword, see &lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns and logs names of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Window Position" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="256">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Returns current window position.&lt;/p&gt;
&lt;p&gt;The position is relative to the top left corner of the screen. Returned values are integers. See also &lt;a href="#Set%20Window%20Position" class="name"&gt;Set Window Position&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${x}&lt;/td&gt;
&lt;td&gt;${y}=&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Window%20Position" class="name"&gt;Get Window Position&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Returns current window position.</shortdoc>
</kw>
<kw name="Get Window Size" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="190">
<arguments repr="inner: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="inner: bool = False">
<name>inner</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns current window width and height as integers.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#Set%20Window%20Size" class="name"&gt;Set Window Size&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;inner&lt;/code&gt; parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; for more details on how to set boolean arguments. The &lt;code&gt;inner&lt;/code&gt; is new in SeleniumLibrary 4.0.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${width}&lt;/td&gt;
&lt;td&gt;${height}=&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Window%20Size" class="name"&gt;Get Window Size&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${width}&lt;/td&gt;
&lt;td&gt;${height}=&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Window%20Size" class="name"&gt;Get Window Size&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Returns current window width and height as integers.</shortdoc>
</kw>
<kw name="Get Window Titles" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="158">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Returns and logs titles of all windows of the selected browser.&lt;/p&gt;
&lt;p&gt;How to select the &lt;code&gt;browser&lt;/code&gt; scope of this keyword, see &lt;a href="#Get%20Locations" class="name"&gt;Get Locations&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns and logs titles of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Go Back" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="582">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Simulates the user clicking the back button on their browser.&lt;/p&gt;</doc>
<shortdoc>Simulates the user clicking the back button on their browser.</shortdoc>
</kw>
<kw name="Go To" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="587">
<arguments repr="url">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url">
<name>url</name>
</arg>
</arguments>
<doc>&lt;p&gt;Navigates the current browser window to the provided &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Navigates the current browser window to the provided ``url``.</shortdoc>
</kw>
<kw name="Handle Alert" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/alert.py" lineno="104">
<arguments repr="action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string">str</type>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Handles the current alert and returns its message.&lt;/p&gt;
&lt;p&gt;By default, the alert is accepted, but this can be controlled with the &lt;code&gt;action&lt;/code&gt; argument that supports the following case-insensitive values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ACCEPT&lt;/code&gt;: Accept the alert i.e. press &lt;code&gt;Ok&lt;/code&gt;. Default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISMISS&lt;/code&gt;: Dismiss the alert i.e. press &lt;code&gt;Cancel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LEAVE&lt;/code&gt;: Leave the alert open.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; argument specifies how long to wait for the alert to appear. If it is not given, the global default &lt;a href="#Timeout" class="name"&gt;timeout&lt;/a&gt; is used instead.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Accept alert.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;action=DISMISS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Dismiss alert.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;timeout=10 s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Use custom timeout and accept alert.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;DISMISS&lt;/td&gt;
&lt;td&gt;1 min&lt;/td&gt;
&lt;td&gt;# Use custom timeout and dismiss alert.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${message} =&lt;/td&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Accept alert and get its message.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${message} =&lt;/td&gt;
&lt;td&gt;Handle Alert&lt;/td&gt;
&lt;td&gt;LEAVE&lt;/td&gt;
&lt;td&gt;# Leave alert open and get its message.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Handles the current alert and returns its message.</shortdoc>
</kw>
<kw name="Input Password" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="242">
<arguments repr="locator: WebElement | str, password: str, clear: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password: str">
<name>password</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clear: bool = True">
<name>clear</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>&lt;p&gt;Types the given password into the text field identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. See &lt;a href="#Input%20Text" class="name"&gt;Input Text&lt;/a&gt; for &lt;code&gt;clear&lt;/code&gt; argument details.&lt;/p&gt;
&lt;p&gt;Difference compared to &lt;a href="#Input%20Text" class="name"&gt;Input Text&lt;/a&gt; is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Input Password&lt;/td&gt;
&lt;td&gt;password_field&lt;/td&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;the password is shown as a normal keyword argument. A way to avoid that is using variables like&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Input Password&lt;/td&gt;
&lt;td&gt;password_field&lt;/td&gt;
&lt;td&gt;${PASSWORD}&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.&lt;/p&gt;
&lt;p&gt;The &lt;span class="name"&gt;clear&lt;/span&gt; argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.&lt;/p&gt;</doc>
<shortdoc>Types the given password into the text field identified by ``locator``.</shortdoc>
</kw>
<kw name="Input Text" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="272">
<arguments repr="locator: WebElement | str, text: str, clear: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clear: bool = True">
<name>clear</name>
<type name="bool" typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>&lt;p&gt;Types the given &lt;code&gt;text&lt;/code&gt; into the text field identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;clear&lt;/code&gt; is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use &lt;a href="#Input%20Password" class="name"&gt;Input Password&lt;/a&gt; if you do not want the given &lt;code&gt;text&lt;/code&gt; to be logged.&lt;/p&gt;
&lt;p&gt;If &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/Grid2"&gt;Selenium Grid&lt;/a&gt; is used and the &lt;code&gt;text&lt;/code&gt; argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the &lt;code&gt;text&lt;/code&gt; string as is to the element. If a file should be transferred to the hub and upload should be performed, please use &lt;a href="#Choose%20File" class="name"&gt;Choose File&lt;/a&gt; keyword.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. See the &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; section how Boolean values are handled.&lt;/p&gt;
&lt;p&gt;Disabling the file upload the Selenium Grid node and the &lt;span class="name"&gt;clear&lt;/span&gt; argument are new in SeleniumLibrary 4.0&lt;/p&gt;</doc>
<shortdoc>Types the given ``text`` into the text field identified by ``locator``.</shortdoc>
</kw>
<kw name="Input Text Into Alert" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/alert.py" lineno="34">
<arguments repr="text: str, action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string">str</type>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Types the given &lt;code&gt;text&lt;/code&gt; into an input field in an alert.&lt;/p&gt;
&lt;p&gt;The alert is accepted by default, but that behavior can be controlled by using the &lt;code&gt;action&lt;/code&gt; argument same way as with &lt;a href="#Handle%20Alert" class="name"&gt;Handle Alert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; specifies how long to wait for the alert to appear. If it is not given, the global default &lt;a href="#Timeout" class="name"&gt;timeout&lt;/a&gt; is used instead.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Types the given ``text`` into an input field in an alert.</shortdoc>
</kw>
<kw name="List Selection Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="104">
<arguments repr="locator: WebElement | str, *expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies selection list &lt;code&gt;locator&lt;/code&gt; has &lt;code&gt;expected&lt;/code&gt; options selected.&lt;/p&gt;
&lt;p&gt;It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.&lt;/p&gt;
&lt;p&gt;If no expected options are given, validates that the list has no selections. A more explicit alternative is using &lt;a href="#List%20Should%20Have%20No%20Selections" class="name"&gt;List Should Have No Selections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#List%20Selection%20Should%20Be" class="name"&gt;List Selection Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;gender&lt;/td&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#List%20Selection%20Should%20Be" class="name"&gt;List Selection Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;interests&lt;/td&gt;
&lt;td&gt;Test Automation&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Verifies selection list ``locator`` has ``expected`` options selected.</shortdoc>
</kw>
<kw name="List Should Have No Selections" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="141">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies selection list &lt;code&gt;locator&lt;/code&gt; has no options selected.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies selection list ``locator`` has no options selected.</shortdoc>
</kw>
<kw name="Location Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="501">
<arguments repr="url: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the current URL is exactly &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;url&lt;/code&gt; argument contains the exact url that should exist in browser.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; argument is new in SeleniumLibrary 3.2.0.&lt;/p&gt;</doc>
<shortdoc>Verifies that the current URL is exactly ``url``.</shortdoc>
</kw>
<kw name="Location Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="519">
<arguments repr="expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the current URL contains &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;expected&lt;/code&gt; argument contains the expected value in url.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; argument is new in SeleniumLibrary 3.2.0.&lt;/p&gt;</doc>
<shortdoc>Verifies that the current URL contains ``expected``.</shortdoc>
</kw>
<kw name="Log Location" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="540">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Logs and returns the current browser window URL.&lt;/p&gt;</doc>
<shortdoc>Logs and returns the current browser window URL.</shortdoc>
</kw>
<kw name="Log Source" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="547">
<arguments repr="loglevel: str = INFO">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = INFO">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>INFO</default>
</arg>
</arguments>
<doc>&lt;p&gt;Logs and returns the HTML source of the current page or frame.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;loglevel&lt;/code&gt; argument defines the used log level. Valid log levels are &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt; (default), &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;TRACE&lt;/code&gt; and &lt;code&gt;NONE&lt;/code&gt; (no logging).&lt;/p&gt;</doc>
<shortdoc>Logs and returns the HTML source of the current page or frame.</shortdoc>
</kw>
<kw name="Log Title" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="559">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Logs and returns the title of the current page.&lt;/p&gt;</doc>
<shortdoc>Logs and returns the title of the current page.</shortdoc>
</kw>
<kw name="Maximize Browser Window" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="185">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Maximizes current browser window.&lt;/p&gt;</doc>
<shortdoc>Maximizes current browser window.</shortdoc>
</kw>
<kw name="Mouse Down" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="780">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates pressing the left mouse button on the element &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The element is pressed without releasing the mouse button.&lt;/p&gt;
&lt;p&gt;See also the more specific keywords &lt;a href="#Mouse%20Down%20On%20Image" class="name"&gt;Mouse Down On Image&lt;/a&gt; and &lt;a href="#Mouse%20Down%20On%20Link" class="name"&gt;Mouse Down On Link&lt;/a&gt;.&lt;/p&gt;</doc>
<shortdoc>Simulates pressing the left mouse button on the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Down On Image" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1021">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates a mouse down event on an image identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, images are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Simulates a mouse down event on an image identified by ``locator``.</shortdoc>
</kw>
<kw name="Mouse Down On Link" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="973">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates a mouse down event on a link identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, links are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;href&lt;/code&gt; and the link text.&lt;/p&gt;</doc>
<shortdoc>Simulates a mouse down event on a link identified by ``locator``.</shortdoc>
</kw>
<kw name="Mouse Out" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="797">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates moving the mouse away from the element &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Simulates moving the mouse away from the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Over" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="814">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates hovering the mouse over the element &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Simulates hovering the mouse over the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Up" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="826">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates releasing the left mouse button on the element &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Simulates releasing the left mouse button on the element ``locator``.</shortdoc>
</kw>
<kw name="Open Browser" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="60">
<arguments repr="url: str | None = None, browser: str = firefox, alias: str | None = None, remote_url: bool | str = False, desired_capabilities: dict | None | str = None, ff_profile_dir: FirefoxProfile | str | None = None, options: Any = None, service_log_path: str | None = None, executable_path: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="url: str | None = None">
<name>url</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = firefox">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>firefox</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_url: bool | str = False">
<name>remote_url</name>
<type name="Union" union="true">bool | str<type name="bool" typedoc="boolean">bool</type><type name="str" typedoc="string">str</type></type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="desired_capabilities: dict | None | str = None">
<name>desired_capabilities</name>
<type name="Union" union="true">dict | None | str<type name="dict" typedoc="dictionary">dict</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ff_profile_dir: FirefoxProfile | str | None = None">
<name>ff_profile_dir</name>
<type name="Union" union="true">FirefoxProfile | str | None<type name="FirefoxProfile">FirefoxProfile</type><type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="options: Any = None">
<name>options</name>
<type name="Any" typedoc="Any">Any</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="service_log_path: str | None = None">
<name>service_log_path</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="executable_path: str | None = None">
<name>executable_path</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Opens a new browser instance to the optional &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;browser&lt;/code&gt; argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;Browser&lt;/th&gt;
&lt;th&gt;Name(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;firefox, ff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google Chrome&lt;/td&gt;
&lt;td&gt;googlechrome, chrome, gc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Headless Firefox&lt;/td&gt;
&lt;td&gt;headlessfirefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Headless Chrome&lt;/td&gt;
&lt;td&gt;headlesschrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Internet Explorer&lt;/td&gt;
&lt;td&gt;internetexplorer, ie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Edge&lt;/td&gt;
&lt;td&gt;edge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari&lt;/td&gt;
&lt;td&gt;safari&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iphone&lt;/td&gt;
&lt;td&gt;iphone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PhantomJS&lt;/td&gt;
&lt;td&gt;phantomjs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTMLUnit&lt;/td&gt;
&lt;td&gt;htmlunit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTMLUnit with Javascript&lt;/td&gt;
&lt;td&gt;htmlunitwithjs&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the &lt;a href="https://github.com/robotframework/SeleniumLibrary#browser-drivers"&gt;project documentation&lt;/a&gt; for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.&lt;/p&gt;
&lt;p&gt;After opening the browser, it is possible to use optional &lt;code&gt;url&lt;/code&gt; to navigate the browser to the desired address.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;alias&lt;/code&gt; is an alias given for this browser instance and it can be used for switching between browsers. When same &lt;code&gt;alias&lt;/code&gt; is given with two &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The &lt;code&gt;alias&lt;/code&gt; definition overrules &lt;code&gt;browser&lt;/code&gt; definition. When same &lt;code&gt;alias&lt;/code&gt; is used but a different &lt;code&gt;browser&lt;/code&gt; is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when &lt;a href="#Close%20All%20Browsers" class="name"&gt;Close All Browsers&lt;/a&gt; is called. See &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;remote_url&lt;/code&gt; is the URL for a &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/Grid2"&gt;Selenium Grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;desired_capabilities&lt;/code&gt; can be used to configure, for example, logging preferences for a browser or a browser and operating system when using &lt;a href="http://saucelabs.com"&gt;Sauce Labs&lt;/a&gt;. Desired capabilities can be given either as a Python dictionary or as a string in the format &lt;code&gt;key1:value1,key2:value2&lt;/code&gt;. &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities"&gt;Selenium documentation&lt;/a&gt; lists possible capabilities that can be enabled.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;ff_profile_dir&lt;/code&gt; is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The &lt;code&gt;ff_profile_dir&lt;/code&gt; can also be an instance of the &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html"&gt;selenium.webdriver.FirefoxProfile&lt;/a&gt; . As a third option, it is possible to use &lt;span class="name"&gt;FirefoxProfile&lt;/span&gt; methods and attributes to define the profile using methods and attributes in the same way as with &lt;code&gt;options&lt;/code&gt; argument. Example: It is possible to use FirefoxProfile &lt;span class="name"&gt;set_preference&lt;/span&gt; to define different profile settings. See &lt;code&gt;options&lt;/code&gt; argument documentation in below how to handle backslash escaping.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;options&lt;/code&gt; argument allows defining browser specific Selenium options. Example for Chrome, the &lt;code&gt;options&lt;/code&gt; argument allows defining the following &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options"&gt;methods and attributes&lt;/a&gt; and for Firefox these &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options"&gt;methods and attributes&lt;/a&gt; are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If &lt;code&gt;browser&lt;/code&gt; argument is &lt;span class="name"&gt;android&lt;/span&gt; then &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options"&gt;Chrome options&lt;/a&gt; is used. Selenium options are also supported, when &lt;code&gt;remote_url&lt;/code&gt; argument is used.&lt;/p&gt;
&lt;p&gt;The SeleniumLibrary &lt;code&gt;options&lt;/code&gt; argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.&lt;/p&gt;
&lt;p&gt;The string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: &lt;span class="name"&gt;add_argument("--headless")&lt;/span&gt; or &lt;span class="name"&gt;add_experimental_option("key", "value")&lt;/span&gt;. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, &lt;span class="name"&gt;headless=True&lt;/span&gt;. Multiple methods and attributes must be separated by a semicolon. Example: &lt;span class="name"&gt;add_argument("--headless");add_argument("--start-maximized")&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Arguments allow defining Python data types and arguments are evaluated by using Python &lt;a href="https://docs.python.org/3/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt;. Strings must be quoted with single or double quotes, example "value" or 'value'. It is also possible to define other Python builtin data types, example &lt;span class="name"&gt;True&lt;/span&gt; or &lt;a href="#type-None" class="name"&gt;None&lt;/a&gt;, by not using quotes around the arguments.&lt;/p&gt;
&lt;p&gt;The string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example &lt;span class="name"&gt;add_argument ( "--headless" )&lt;/span&gt; is same as &lt;span class="name"&gt;add_argument("--headless")&lt;/span&gt;. But &lt;span class="name"&gt;add_argument(" --headless ")&lt;/span&gt; is not same same as &lt;span class="name"&gt;add_argument ( "--headless" )&lt;/span&gt;, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: "C:\path\to\profile" must be written as "C:\\\\path\\\to\\\\profile". Another way to write backslash is use Python &lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"&gt;raw strings&lt;/a&gt; and example write: r"C:\\path\\to\\profile".&lt;/p&gt;
&lt;p&gt;As last format, &lt;code&gt;options&lt;/code&gt; argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to &lt;span class="name"&gt;${options}&lt;/span&gt; variable in the Robot Framework data:&lt;/p&gt;
&lt;pre&gt;
options = webdriver.ChromeOptions()
options.add_argument('--disable-dev-shm-usage')
return options
&lt;/pre&gt;
&lt;p&gt;Then the &lt;span class="name"&gt;${options}&lt;/span&gt; variable can be used as an argument to &lt;code&gt;options&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example the &lt;code&gt;options&lt;/code&gt; argument can be used to launch Chomium-based applications which utilize the &lt;a href="https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver"&gt;Chromium Embedded Framework&lt;/a&gt; . To lauch Chomium-based application, use &lt;code&gt;options&lt;/code&gt; to define &lt;span class="name"&gt;binary_location&lt;/span&gt; attribute and use &lt;span class="name"&gt;add_argument&lt;/span&gt; method to define &lt;span class="name"&gt;remote-debugging-port&lt;/span&gt; port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;service_log_path&lt;/code&gt; argument defines the name of the file where to write the browser driver logs. If the &lt;code&gt;service_log_path&lt;/code&gt;  argument contain a  marker &lt;code&gt;{index}&lt;/code&gt;, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's &lt;a href="https://docs.python.org/3/library/string.html#format-string-syntax"&gt;format string syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Optional &lt;code&gt;executable_path&lt;/code&gt; argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;$PATH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;alias=Firefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Edge&lt;/td&gt;
&lt;td&gt;remote_url=http://127.0.0.1:4444/wd/hub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;about:blank&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;browser=Chrome&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Alias examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${1_index} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;alias=Chrome&lt;/td&gt;
&lt;td&gt;# Opens new browser because alias is new.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${2_index} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Opens new browser because alias is not defined.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${3_index} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;alias=Chrome&lt;/td&gt;
&lt;td&gt;# Switches to the browser with Chrome alias.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${4_index} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;alias=${1_index}&lt;/td&gt;
&lt;td&gt;# Switches to the browser with Chrome alias.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should Be Equal&lt;/td&gt;
&lt;td&gt;${1_index}&lt;/td&gt;
&lt;td&gt;${3_index}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should Be Equal&lt;/td&gt;
&lt;td&gt;${1_index}&lt;/td&gt;
&lt;td&gt;${4_index}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should Be Equal&lt;/td&gt;
&lt;td&gt;${2_index}&lt;/td&gt;
&lt;td&gt;${2}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Example when using &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options"&gt;Chrome options&lt;/a&gt; method:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;options=add_argument("--disable-popup-blocking"); add_argument("--ignore-certificate-errors")&lt;/td&gt;
&lt;td&gt;# Sting format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${options} =&lt;/td&gt;
&lt;td&gt;Get Options&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Selenium options instance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;options=${options}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;options=binary_location="/path/to/binary";add_argument("remote-debugging-port=port")&lt;/td&gt;
&lt;td&gt;# Start Chomium-based application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;options=binary_location=r"C:\\path\\to\\binary"&lt;/td&gt;
&lt;td&gt;# Windows OS path escaping.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Example for FirefoxProfile&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;ff_profile_dir=/path/to/profile&lt;/td&gt;
&lt;td&gt;# Using profile from disk.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;ff_profile_dir=${FirefoxProfile_instance}&lt;/td&gt;
&lt;td&gt;# Using instance of FirefoxProfile.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://example.com"&gt;http://example.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;ff_profile_dir=set_preference("key", "value");set_preference("other", "setting")&lt;/td&gt;
&lt;td&gt;# Defining profile using FirefoxProfile mehtods.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If the provided configuration options are not enough, it is possible to use &lt;a href="#Create%20Webdriver" class="name"&gt;Create Webdriver&lt;/a&gt; to customize browser initialization even more.&lt;/p&gt;
&lt;p&gt;Applying &lt;code&gt;desired_capabilities&lt;/code&gt; argument also for local browser is new in SeleniumLibrary 3.1.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;alias&lt;/code&gt; to decide, is the new browser opened is new in SeleniumLibrary 4.0. The &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;service_log_path&lt;/code&gt; are new in SeleniumLibrary 4.0. Support for &lt;code&gt;ff_profile_dir&lt;/code&gt; accepting an instance of the &lt;span class="name"&gt;selenium.webdriver.FirefoxProfile&lt;/span&gt; and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0.&lt;/p&gt;
&lt;p&gt;Making &lt;code&gt;url&lt;/code&gt; optional is new in SeleniumLibrary 4.1.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;executable_path&lt;/code&gt; argument is new in SeleniumLibrary 4.2.&lt;/p&gt;</doc>
<shortdoc>Opens a new browser instance to the optional ``url``.</shortdoc>
</kw>
<kw name="Open Context Menu" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="837">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Opens the context menu on the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Opens the context menu on the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Page Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="127">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that current page contains &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If this keyword fails, it automatically logs the page source using the log level specified with the optional &lt;code&gt;loglevel&lt;/code&gt; argument. Valid log levels are &lt;code&gt;TRACE&lt;/code&gt; (default), &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, and &lt;code&gt;NONE&lt;/code&gt;. If the log level is &lt;code&gt;NONE&lt;/code&gt; or below the current active log level the source will not be logged.&lt;/p&gt;</doc>
<shortdoc>Verifies that current page contains ``text``.</shortdoc>
</kw>
<kw name="Page Should Contain Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="430">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies button &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, buttons are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Verifies button ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Checkbox" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="70">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies checkbox &lt;code&gt;locator&lt;/code&gt; is found from the current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies checkbox ``locator`` is found from the current page.</shortdoc>
</kw>
<kw name="Page Should Contain Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="144">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; is found on the current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;limit&lt;/code&gt; argument can used to define how many elements the page should contain. When &lt;code&gt;limit&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Examples assumes that locator matches to two elements.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div_name&lt;/td&gt;
&lt;td&gt;limit=1&lt;/td&gt;
&lt;td&gt;# Keyword fails.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div_name&lt;/td&gt;
&lt;td&gt;limit=2&lt;/td&gt;
&lt;td&gt;# Keyword passes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div_name&lt;/td&gt;
&lt;td&gt;limit=none&lt;/td&gt;
&lt;td&gt;# None is considered one or more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div_name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Same as above.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;limit&lt;/code&gt; argument is new in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` is found on the current page.</shortdoc>
</kw>
<kw name="Page Should Contain Image" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1033">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies image identified by &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, images are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies image identified by ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Link" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="985">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies link identified by &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, links are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;href&lt;/code&gt; and the link text.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies link identified by ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain List" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="159">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies selection list &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies selection list ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Radio Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="132">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies radio button &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Verifies radio button ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Textfield" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="300">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text field &lt;code&gt;locator&lt;/code&gt; is found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text field ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="192">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies the current page does not contain &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies the current page does not contain ``text``.</shortdoc>
</kw>
<kw name="Page Should Not Contain Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="451">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies button &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, buttons are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Verifies button ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Checkbox" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="87">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies checkbox &lt;code&gt;locator&lt;/code&gt; is not found from the current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies checkbox ``locator`` is not found from the current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="204">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that element &lt;code&gt;locator&lt;/code&gt; is not found on the current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies that element ``locator`` is not found on the current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Image" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1051">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies image identified by &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, images are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies image identified by ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Link" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1003">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies link identified by &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, links are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;href&lt;/code&gt; and the link text.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies link identified by ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain List" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="176">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies selection list &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies selection list ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Radio Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="150">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies radio button &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;</doc>
<shortdoc>Verifies radio button ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Textfield" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="317">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text field &lt;code&gt;locator&lt;/code&gt; is not found from current page.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;loglevel&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text field ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Press Key" deprecated="true" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="869">
<arguments repr="locator: WebElement | str, key: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="key: str">
<name>key</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;&lt;b&gt;DEPRECATED in SeleniumLibrary 4.0.&lt;/b&gt; use &lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt; instead.&lt;/p&gt;</doc>
<shortdoc>*DEPRECATED in SeleniumLibrary 4.0.* use `Press Keys` instead.</shortdoc>
</kw>
<kw name="Press Keys" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="877">
<arguments repr="locator: WebElement | None | str = None, *keys: str">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: WebElement | None | str = None">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
<default>None</default>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*keys: str">
<name>keys</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates the user pressing key(s) to an element or on the active browser.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;locator&lt;/code&gt; evaluates as false, see &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; for more details, then the &lt;code&gt;keys&lt;/code&gt; are sent to the currently active browser. Otherwise element is searched and &lt;code&gt;keys&lt;/code&gt; are send to the element identified by the &lt;code&gt;locator&lt;/code&gt;. In later case, keyword fails if element is not found. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keys&lt;/code&gt; arguments can contain one or many strings, but it can not be empty. &lt;code&gt;keys&lt;/code&gt; can also be a combination of &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html"&gt;Selenium Keys&lt;/a&gt; and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the &lt;span class="name"&gt;+&lt;/span&gt; character, like in &lt;span class="name"&gt;CONTROL+c&lt;/span&gt;. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string &lt;span class="name"&gt;AALTO&lt;/span&gt; and &lt;span class="name"&gt;ALT&lt;/span&gt; not parsed inside of the string. But &lt;span class="name"&gt;A+ALT+O&lt;/span&gt; would found Selenium ALT key from the &lt;code&gt;keys&lt;/code&gt; argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.&lt;/p&gt;
&lt;p&gt;If Selenium Keys are detected in the &lt;code&gt;keys&lt;/code&gt; argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with &lt;span class="name"&gt;+&lt;/span&gt; character, example &lt;span class="name"&gt;E+N+D&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="name"&gt;CTRL&lt;/span&gt; is alias for &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL"&gt;Selenium CONTROL&lt;/a&gt; and ESC is alias for &lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE"&gt;Selenium ESCAPE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.3&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;AAAAA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Sends string "AAAAA" to element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;BBBBB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Sends string "BBBBB" to currently active browser.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;E+N+D&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Sends string "END" to element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;XXX&lt;/td&gt;
&lt;td&gt;YY&lt;/td&gt;
&lt;td&gt;# Sends strings "XXX" and "YY" to element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;XXX+YY&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Same as above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;ALT+ARROW_DOWN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Pressing "ALT" key down, then pressing ARROW_DOWN and then releasing both keys.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;ALT&lt;/td&gt;
&lt;td&gt;ARROW_DOWN&lt;/td&gt;
&lt;td&gt;# Pressing "ALT" key and then pressing ARROW_DOWN.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;text_field&lt;/td&gt;
&lt;td&gt;CTRL+c&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Pressing CTRL key down, sends string "c" and then releases CTRL key.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Press%20Keys" class="name"&gt;Press Keys&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;button&lt;/td&gt;
&lt;td&gt;RETURN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Pressing "ENTER" key to element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Simulates the user pressing key(s) to an element or on the active browser.</shortdoc>
</kw>
<kw name="Radio Button Should Be Set To" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="168">
<arguments repr="group_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies radio button group &lt;code&gt;group_name&lt;/code&gt; is set to &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;group_name&lt;/code&gt; is the &lt;code&gt;name&lt;/code&gt; of the radio button group.&lt;/p&gt;</doc>
<shortdoc>Verifies radio button group ``group_name`` is set to ``value``.</shortdoc>
</kw>
<kw name="Radio Button Should Not Be Selected" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="183">
<arguments repr="group_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies radio button group &lt;code&gt;group_name&lt;/code&gt; has no selection.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;group_name&lt;/code&gt; is the &lt;code&gt;name&lt;/code&gt; of the radio button group.&lt;/p&gt;</doc>
<shortdoc>Verifies radio button group ``group_name`` has no selection.</shortdoc>
</kw>
<kw name="Register Keyword To Run On Failure" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/runonfailure.py" lineno="23">
<arguments repr="keyword: str | None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword: str | None">
<name>keyword</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the keyword to execute, when a SeleniumLibrary keyword fails.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keyword&lt;/code&gt; is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.&lt;/p&gt;
&lt;p&gt;The initial keyword to use is set when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library, and the keyword that is used by default is &lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt;. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.&lt;/p&gt;
&lt;p&gt;It is possible to use string &lt;code&gt;NOTHING&lt;/code&gt; or &lt;code&gt;NONE&lt;/code&gt;, case-insensitively, as well as Python &lt;code&gt;None&lt;/code&gt; to disable this feature altogether.&lt;/p&gt;
&lt;p&gt;This keyword returns the name of the previously registered failure keyword or Python &lt;code&gt;None&lt;/code&gt; if this functionality was previously disabled. The return value can be always used to restore the original value later.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Register%20Keyword%20To%20Run%20On%20Failure" class="name"&gt;Register Keyword To Run On Failure&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Log Source&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${previous kw}=&lt;/td&gt;
&lt;td&gt;&lt;a href="#Register%20Keyword%20To%20Run%20On%20Failure" class="name"&gt;Register Keyword To Run On Failure&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Register%20Keyword%20To%20Run%20On%20Failure" class="name"&gt;Register Keyword To Run On Failure&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${previous kw}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Changes in SeleniumLibrary 3.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possible to use string &lt;code&gt;NONE&lt;/code&gt; or Python &lt;code&gt;None&lt;/code&gt; to disable the functionality.&lt;/li&gt;
&lt;li&gt;Return Python &lt;code&gt;None&lt;/code&gt; when the functionality was disabled earlier. In previous versions special value &lt;code&gt;No Keyword&lt;/code&gt; was returned and it could not be used to restore the original state.&lt;/li&gt;
&lt;/ul&gt;</doc>
<shortdoc>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</shortdoc>
</kw>
<kw name="Reload Page" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="593">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Simulates user reloading page.&lt;/p&gt;</doc>
<shortdoc>Simulates user reloading page.</shortdoc>
</kw>
<kw name="Remove Location Strategy" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="1102">
<arguments repr="strategy_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_name: str">
<name>strategy_name</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Removes a previously added custom location strategy.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Custom%20locators" class="name"&gt;Custom locators&lt;/a&gt; for information on how to create and use custom strategies.&lt;/p&gt;</doc>
<shortdoc>Removes a previously added custom location strategy.</shortdoc>
</kw>
<kw name="Scroll Element Into View" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="730">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Scrolls the element identified by &lt;code&gt;locator&lt;/code&gt; into view.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.2.0&lt;/p&gt;</doc>
<shortdoc>Scrolls the element identified by ``locator`` into view.</shortdoc>
</kw>
<kw name="Select All From List" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="193">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Selects all options from multi-selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Selects all options from multi-selection list ``locator``.</shortdoc>
</kw>
<kw name="Select Checkbox" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="104">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Selects the checkbox identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Does nothing if checkbox is already selected.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Selects the checkbox identified by ``locator``.</shortdoc>
</kw>
<kw name="Select Frame" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/frames.py" lineno="25">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets frame identified by &lt;code&gt;locator&lt;/code&gt; as the current frame.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Works both with frames and iframes. Use &lt;a href="#Unselect%20Frame" class="name"&gt;Unselect Frame&lt;/a&gt; to cancel the frame selection and return to the main frame.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Select%20Frame" class="name"&gt;Select Frame&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;top-frame&lt;/td&gt;
&lt;td&gt;# Select frame with id or name 'top-frame'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Link" class="name"&gt;Click Link&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;# Click link 'example' in the selected frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Unselect%20Frame" class="name"&gt;Unselect Frame&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Back to main frame.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Select%20Frame" class="name"&gt;Select Frame&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;//iframe[@name='xxx']&lt;/td&gt;
&lt;td&gt;# Select frame using xpath&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets frame identified by ``locator`` as the current frame.</shortdoc>
</kw>
<kw name="Select From List By Index" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="209">
<arguments repr="locator: WebElement | str, *indexes: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*indexes: str">
<name>indexes</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Selects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;indexes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Indexes of list options start from 0.&lt;/p&gt;
&lt;p&gt;If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Selects options from selection list ``locator`` by ``indexes``.</shortdoc>
</kw>
<kw name="Select From List By Label" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="256">
<arguments repr="locator: WebElement | str, *labels: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*labels: str">
<name>labels</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Selects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;labels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Selects options from selection list ``locator`` by ``labels``.</shortdoc>
</kw>
<kw name="Select From List By Value" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="234">
<arguments repr="locator: WebElement | str, *values: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*values: str">
<name>values</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Selects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;values&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Selects options from selection list ``locator`` by ``values``.</shortdoc>
</kw>
<kw name="Select Radio Button" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="198">
<arguments repr="group_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the radio button group &lt;code&gt;group_name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The radio button to be selected is located by two arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group_name&lt;/code&gt; is the name of the radio button group.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; is the &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt; attribute of the actual radio button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Select%20Radio%20Button" class="name"&gt;Select Radio Button&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;XL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Select%20Radio%20Button" class="name"&gt;Select Radio Button&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;contact&lt;/td&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets the radio button group ``group_name`` to ``value``.</shortdoc>
</kw>
<kw name="Set Action Chain Delay" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="709">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the duration of delay in ActionChains() used by SeleniumLibrary.&lt;/p&gt;
&lt;p&gt;The value can be given as a number that is considered to be seconds or as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Value is always stored as milliseconds internally.&lt;/p&gt;
&lt;p&gt;The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;</doc>
<shortdoc>Sets the duration of delay in ActionChains() used by SeleniumLibrary.</shortdoc>
</kw>
<kw name="Set Browser Implicit Wait" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="731">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the implicit wait value used by Selenium.&lt;/p&gt;
&lt;p&gt;Same as &lt;a href="#Set%20Selenium%20Implicit%20Wait" class="name"&gt;Set Selenium Implicit Wait&lt;/a&gt; but only affects the current browser.&lt;/p&gt;</doc>
<shortdoc>Sets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Set Focus To Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="718">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the focus to the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Prior to SeleniumLibrary 3.0 this keyword was named &lt;span class="name"&gt;Focus&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Sets the focus to the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Set Screenshot Directory" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/screenshot.py" lineno="32">
<arguments repr="path: None | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: None | str">
<name>path</name>
<type name="Union" union="true">None | str<type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the directory for captured screenshots.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;path&lt;/code&gt; argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when &lt;a href="#Importing" class="name"&gt;importing&lt;/a&gt; the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;path&lt;/code&gt; equals to EMBED (case insensitive) and &lt;a href="#Capture%20Page%20Screenshot" class="name"&gt;Capture Page Screenshot&lt;/a&gt; or &lt;a href="#Capture%20Element%20Screenshot" class="name"&gt;capture Element Screenshot&lt;/a&gt; keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.&lt;/p&gt;
&lt;p&gt;The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;
&lt;p&gt;Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.&lt;/p&gt;</doc>
<shortdoc>Sets the directory for captured screenshots.</shortdoc>
</kw>
<kw name="Set Selenium Implicit Wait" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="683">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the implicit wait value used by Selenium.&lt;/p&gt;
&lt;p&gt;The value can be given as a number that is considered to be seconds or as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;. The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;
&lt;p&gt;This keyword sets the implicit wait for all opened browsers. Use &lt;a href="#Set%20Browser%20Implicit%20Wait" class="name"&gt;Set Browser Implicit Wait&lt;/a&gt; to set it only to the current browser.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Implicit%20wait" class="name"&gt;Implicit wait&lt;/a&gt; section above for more information.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${orig wait} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Implicit%20Wait" class="name"&gt;Set Selenium Implicit Wait&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Perform AJAX call that is slow&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Implicit%20Wait" class="name"&gt;Set Selenium Implicit Wait&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${orig wait}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Set Selenium Page Load Timeout" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="740">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the page load timeout value used by Selenium.&lt;/p&gt;
&lt;p&gt;The value can be given as a number that is considered to be seconds or as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;. The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;
&lt;p&gt;In contrast to &lt;a href="#Set%20Selenium%20Timeout" class="name"&gt;Set Selenium Timeout&lt;/a&gt; and &lt;a href="#Set%20Selenium%20Implicit%20Wait" class="name"&gt;Set Selenium Implicit Wait&lt;/a&gt; this keywords sets the time for Webdriver to wait until page is loaded before throwing an error.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Page%20load" class="name"&gt;Page load&lt;/a&gt; section above for more information.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${orig page load timeout} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Page%20Load%20Timeout" class="name"&gt;Set Selenium Page Load Timeout&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;30 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Open page that loads slowly&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Page%20Load%20Timeout" class="name"&gt;Set Selenium Page Load Timeout&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${orig page load timeout}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;New in SeleniumLibrary 6.1&lt;/p&gt;</doc>
<shortdoc>Sets the page load timeout value used by Selenium.</shortdoc>
</kw>
<kw name="Set Selenium Speed" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="641">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the delay that is waited after each Selenium command.&lt;/p&gt;
&lt;p&gt;The value can be given as a number that is considered to be seconds or as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;. The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Selenium%20speed" class="name"&gt;Selenium Speed&lt;/a&gt; section above for more information.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Speed" class="name"&gt;Set Selenium Speed&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.5 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets the delay that is waited after each Selenium command.</shortdoc>
</kw>
<kw name="Set Selenium Timeout" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="661">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets the timeout that is used by various keywords.&lt;/p&gt;
&lt;p&gt;The value can be given as a number that is considered to be seconds or as a human-readable string like &lt;code&gt;1 second&lt;/code&gt;. The previous value is returned and can be used to restore the original value later if needed.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Timeout" class="name"&gt;Timeout&lt;/a&gt; section above for more information.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${orig timeout} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Timeout" class="name"&gt;Set Selenium Timeout&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;15 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="name"&gt;Open page that loads slowly&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Selenium%20Timeout" class="name"&gt;Set Selenium Timeout&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${orig timeout}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets the timeout that is used by various keywords.</shortdoc>
</kw>
<kw name="Set Window Position" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="269">
<arguments repr="x: int, y: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="x: int">
<name>x</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="y: int">
<name>y</name>
<type name="int" typedoc="integer">int</type>
</arg>
</arguments>
<doc>&lt;p&gt;Sets window position using &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates.&lt;/p&gt;
&lt;p&gt;The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.&lt;/p&gt;
&lt;p&gt;Values can be given using strings containing numbers or by using actual numbers. See also &lt;a href="#Get%20Window%20Position" class="name"&gt;Get Window Position&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Window%20Position" class="name"&gt;Set Window Position&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets window position using ``x`` and ``y`` coordinates.</shortdoc>
</kw>
<kw name="Set Window Size" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="212">
<arguments repr="width: int, height: int, inner: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="width: int">
<name>width</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="height: int">
<name>height</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="inner: bool = False">
<name>inner</name>
<type name="bool" typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>&lt;p&gt;Sets current windows size to given &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Values can be given using strings containing numbers or by using actual numbers. See also &lt;a href="#Get%20Window%20Size" class="name"&gt;Get Window Size&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;inner&lt;/code&gt; parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM &lt;i&gt;window.innerWidth&lt;/i&gt; and &lt;i&gt;window.innerHeight&lt;/i&gt;. See &lt;a href="#Boolean%20arguments" class="name"&gt;Boolean arguments&lt;/a&gt; for more details on how to set boolean arguments.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;inner&lt;/code&gt; argument is new since SeleniumLibrary 4.0.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;inner&lt;/code&gt; argument does not support Frames. If a frame is selected, switch to default before running this.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Window%20Size" class="name"&gt;Set Window Size&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Set%20Window%20Size" class="name"&gt;Set Window Size&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Sets current windows size to given ``width`` and ``height``.</shortdoc>
</kw>
<kw name="Simulate Event" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/element.py" lineno="844">
<arguments repr="locator: WebElement | str, event: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="event: str">
<name>event</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Simulates &lt;code&gt;event&lt;/code&gt; on the element identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This keyword is useful if element has &lt;code&gt;OnEvent&lt;/code&gt; handler that needs to be explicitly invoked.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Prior to SeleniumLibrary 3.0 this keyword was named &lt;span class="name"&gt;Simulate&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Simulates ``event`` on the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Submit Form" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="29">
<arguments repr="locator: WebElement | None | str = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: WebElement | None | str = None">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Submits a form identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;locator&lt;/code&gt; is not given, first form on the page is submitted.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Submits a form identified by ``locator``.</shortdoc>
</kw>
<kw name="Switch Browser" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="403">
<arguments repr="index_or_alias: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="index_or_alias: str">
<name>index_or_alias</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Switches between active browsers using &lt;code&gt;index_or_alias&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Indices are returned by the &lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt; keyword and aliases can be given to it explicitly. Indices start from 1.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://google.com"&gt;http://google.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ff&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Location%20Should%20Be" class="name"&gt;Location Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://google.com"&gt;http://google.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://yahoo.com"&gt;http://yahoo.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ie&lt;/td&gt;
&lt;td&gt;alias=second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Location%20Should%20Be" class="name"&gt;Location Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://yahoo.com"&gt;http://yahoo.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;# index&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;I'm feeling lucky&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;second&lt;/td&gt;
&lt;td&gt;# alias&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Page%20Should%20Contain" class="name"&gt;Page Should Contain&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;More Yahoo!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Close%20All%20Browsers" class="name"&gt;Close All Browsers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Above example expects that there was no other open browsers when opening the first one because it used index &lt;code&gt;1&lt;/code&gt; when switching to it later. If you are not sure about that, you can store the index into a variable as below.&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;${index} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Open%20Browser" class="name"&gt;Open Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="http://google.com"&gt;http://google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# Do something ...&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${index}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Switches between active browsers using ``index_or_alias``.</shortdoc>
</kw>
<kw name="Switch Window" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/window.py" lineno="33">
<arguments repr="locator: list | str = MAIN, timeout: str | None = None, browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: list | str = MAIN">
<name>locator</name>
<type name="Union" union="true">list | str<type name="list" typedoc="list">list</type><type name="str" typedoc="string">str</type></type>
<default>MAIN</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: str | None = None">
<name>timeout</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string">str</type>
<default>CURRENT</default>
</arg>
</arguments>
<doc>&lt;p&gt;Switches to browser window matching &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.&lt;/p&gt;
&lt;p&gt;Notice that alerts should be handled with &lt;a href="#Handle%20Alert" class="name"&gt;Handle Alert&lt;/a&gt; or other alert related keywords.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;locator&lt;/code&gt; can be specified using different strategies somewhat similarly as when &lt;a href="#Locating%20elements" class="name"&gt;locating elements&lt;/a&gt; on pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, the &lt;code&gt;locator&lt;/code&gt; is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;locator&lt;/code&gt; can specify an explicit strategy by using the format &lt;code&gt;strategy:value&lt;/code&gt; (recommended) or &lt;code&gt;strategy=value&lt;/code&gt;. Supported strategies are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;url&lt;/code&gt;. These matches windows using their name, title, or URL, respectively. Additionally, &lt;code&gt;default&lt;/code&gt; can be used to explicitly use the default strategy explained above.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;locator&lt;/code&gt; is &lt;code&gt;NEW&lt;/code&gt; (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;locator&lt;/code&gt; is &lt;code&gt;MAIN&lt;/code&gt; (default, case-insensitive), the main window is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;locator&lt;/code&gt; is &lt;code&gt;CURRENT&lt;/code&gt; (case-insensitive), nothing is done. This effectively just returns the current window handle.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;locator&lt;/code&gt; is not a string, it is expected to be a list of window handles &lt;i&gt;to exclude&lt;/i&gt;. Such a list of excluded windows can be got from &lt;a href="#Get%20Window%20Handles" class="name"&gt;Get Window Handles&lt;/a&gt; before doing an action that opens a new window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; is used to specify how long keyword will poll to select the new window. The &lt;code&gt;timeout&lt;/code&gt; is new in SeleniumLibrary 3.2.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Link" class="name"&gt;Click Link&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;popup1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Open new window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;example&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Select window using default strategy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Title%20Should%20Be" class="name"&gt;Title Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pop-up 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Button" class="name"&gt;Click Button&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;popup2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Open another window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${handle} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;NEW&lt;/td&gt;
&lt;td&gt;# Select latest opened window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Title%20Should%20Be" class="name"&gt;Title Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pop-up 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${handle}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Select window using handle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Title%20Should%20Be" class="name"&gt;Title Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pop-up 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;MAIN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Select the main window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Title%20Should%20Be" class="name"&gt;Title Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Main&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;${excludes} =&lt;/td&gt;
&lt;td&gt;&lt;a href="#Get%20Window%20Handles" class="name"&gt;Get Window Handles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Get list of current windows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Click%20Link" class="name"&gt;Click Link&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;popup3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Open one more window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Switch%20Window" class="name"&gt;Switch Window&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;${excludes}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;# Select window using excludes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Title%20Should%20Be" class="name"&gt;Title Should Be&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Pop-up 3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;browser&lt;/code&gt; argument allows with &lt;code&gt;index_or_alias&lt;/code&gt; to implicitly switch to a specific browser when switching to a window. See &lt;a href="#Switch%20Browser" class="name"&gt;Switch Browser&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;browser&lt;/code&gt; is &lt;code&gt;CURRENT&lt;/code&gt; (case-insensitive), no other browser is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;strategy:value&lt;/code&gt; syntax is only supported by SeleniumLibrary 3.0 and newer.&lt;/li&gt;
&lt;li&gt;Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.&lt;/li&gt;
&lt;li&gt;Earlier versions supported aliases &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and the empty string for selecting the main window, and alias &lt;code&gt;self&lt;/code&gt; for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.&lt;/li&gt;
&lt;/ul&gt;</doc>
<shortdoc>Switches to browser window matching ``locator``.</shortdoc>
</kw>
<kw name="Table Cell Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="90">
<arguments repr="locator: WebElement | None | str, row: int, column: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies table cell contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Get%20Table%20Cell" class="name"&gt;Get Table Cell&lt;/a&gt; that this keyword uses internally for an explanation about accepted arguments.&lt;/p&gt;</doc>
<shortdoc>Verifies table cell contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Column Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="113">
<arguments repr="locator: WebElement | None | str, column: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies table column contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument and its column found using &lt;code&gt;column&lt;/code&gt;. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.&lt;/p&gt;
&lt;p&gt;If a table contains cells that span multiple columns, those merged cells count as a single column.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies table column contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Footer Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="144">
<arguments repr="locator: WebElement | None | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies table footer contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; element inside &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt; element is considered to be part of the footer.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies table footer contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Header Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="169">
<arguments repr="locator: WebElement | None | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies table header contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element anywhere in the table is considered to be part of the header.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies table header contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Row Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="194">
<arguments repr="locator: WebElement | None | str, row: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that table row contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument and its column found using &lt;code&gt;column&lt;/code&gt;. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.&lt;/p&gt;
&lt;p&gt;If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies that table row contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/tableelement.py" lineno="225">
<arguments repr="locator: WebElement | None | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string">str</type>
<default>TRACE</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies table contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The table is located using the &lt;code&gt;locator&lt;/code&gt; argument. See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;See &lt;a href="#Page%20Should%20Contain%20Element" class="name"&gt;Page Should Contain Element&lt;/a&gt; for an explanation about the &lt;code&gt;loglevel&lt;/code&gt; argument.&lt;/p&gt;</doc>
<shortdoc>Verifies table contains text ``expected``.</shortdoc>
</kw>
<kw name="Textarea Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="382">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text area &lt;code&gt;locator&lt;/code&gt; contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; can be used to override default error message.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text area ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Textarea Value Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="406">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text area &lt;code&gt;locator&lt;/code&gt; has exactly text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; can be used to override default error message.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text area ``locator`` has exactly text ``expected``.</shortdoc>
</kw>
<kw name="Textfield Should Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="334">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text field &lt;code&gt;locator&lt;/code&gt; contains text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text field ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Textfield Value Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="358">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies text field &lt;code&gt;locator&lt;/code&gt; has exactly text &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; can be used to override default error message.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Verifies text field ``locator`` has exactly text ``expected``.</shortdoc>
</kw>
<kw name="Title Should Be" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/browsermanagement.py" lineno="566">
<arguments repr="title: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="title: str">
<name>title</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Verifies that the current page title equals &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; argument is new in SeleniumLibrary 3.1.&lt;/p&gt;</doc>
<shortdoc>Verifies that the current page title equals ``title``.</shortdoc>
</kw>
<kw name="Unselect All From List" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="278">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Unselects all options from multi-selection list &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Unselects all options from multi-selection list ``locator``.</shortdoc>
</kw>
<kw name="Unselect Checkbox" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/formelement.py" lineno="118">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
</arguments>
<doc>&lt;p&gt;Removes the selection of checkbox identified by &lt;code&gt;locator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Does nothing if the checkbox is not selected.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Removes the selection of checkbox identified by ``locator``.</shortdoc>
</kw>
<kw name="Unselect Frame" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/frames.py" lineno="45">
<arguments repr="">
</arguments>
<doc>&lt;p&gt;Sets the main frame as the current frame.&lt;/p&gt;
&lt;p&gt;In practice cancels the previous &lt;a href="#Select%20Frame" class="name"&gt;Select Frame&lt;/a&gt; call.&lt;/p&gt;</doc>
<shortdoc>Sets the main frame as the current frame.</shortdoc>
</kw>
<kw name="Unselect From List By Index" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="295">
<arguments repr="locator: WebElement | str, *indexes: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*indexes: str">
<name>indexes</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Unselects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;indexes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Indexes of list options start from 0. This keyword works only with multi-selection lists.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``indexes``.</shortdoc>
</kw>
<kw name="Unselect From List By Label" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="347">
<arguments repr="locator: WebElement | str, *labels: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*labels: str">
<name>labels</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Unselects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;labels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This keyword works only with multi-selection lists.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``labels``.</shortdoc>
</kw>
<kw name="Unselect From List By Value" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/selectelement.py" lineno="322">
<arguments repr="locator: WebElement | str, *values: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">WebElement | str<type name="WebElement">WebElement</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*values: str">
<name>values</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Unselects options from selection list &lt;code&gt;locator&lt;/code&gt; by &lt;code&gt;values&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This keyword works only with multi-selection lists.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``values``.</shortdoc>
</kw>
<kw name="Wait For Condition" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="31">
<arguments repr="condition: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="condition: str">
<name>condition</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until &lt;code&gt;condition&lt;/code&gt; is true or &lt;code&gt;timeout&lt;/code&gt; expires.&lt;/p&gt;
&lt;p&gt;The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See &lt;a href="#Execute%20Javascript" class="name"&gt;Execute JavaScript&lt;/a&gt; for information about accessing content on pages.&lt;/p&gt;
&lt;p&gt;Fails if the timeout expires before the condition becomes true. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Wait%20For%20Condition" class="name"&gt;Wait For Condition&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;return document.title == "New Title"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Wait%20For%20Condition" class="name"&gt;Wait For Condition&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;return jQuery.active == 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#Wait%20For%20Condition" class="name"&gt;Wait For Condition&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;style = document.querySelector('h1').style; return style.background == "red" &amp;amp;&amp;amp; style.color == "white"&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</doc>
<shortdoc>Waits until ``condition`` is true or ``timeout`` expires.</shortdoc>
</kw>
<kw name="Wait Until Element Contains" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="373">
<arguments repr="locator: WebElement | None | str, text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; contains &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the text appears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` contains ``text``.</shortdoc>
</kw>
<kw name="Wait Until Element Does Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="397">
<arguments repr="locator: WebElement | None | str, text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; does not contain &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the text disappears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` does not contain ``text``.</shortdoc>
</kw>
<kw name="Wait Until Element Is Enabled" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="345">
<arguments repr="locator: WebElement | None | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; is enabled.&lt;/p&gt;
&lt;p&gt;Element is considered enabled if it is not disabled nor read-only.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the element is enabled. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` is enabled.</shortdoc>
</kw>
<kw name="Wait Until Element Is Not Visible" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="322">
<arguments repr="locator: WebElement | None | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; is not visible.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the element is not visible. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` is not visible.</shortdoc>
</kw>
<kw name="Wait Until Element Is Visible" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="299">
<arguments repr="locator: WebElement | None | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; is visible.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the element is visible. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` is visible.</shortdoc>
</kw>
<kw name="Wait Until Location Contains" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="123">
<arguments repr="expected: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the current URL contains &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;expected&lt;/code&gt; argument contains the expected value in url.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the location contains. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.0&lt;/p&gt;</doc>
<shortdoc>Waits until the current URL contains ``expected``.</shortdoc>
</kw>
<kw name="Wait Until Location Does Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="151">
<arguments repr="location: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="location: str">
<name>location</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the current URL does not contains &lt;code&gt;location&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;location&lt;/code&gt; argument contains value not expected in url.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the location not contains. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.3&lt;/p&gt;</doc>
<shortdoc>Waits until the current URL does not contains ``location``.</shortdoc>
</kw>
<kw name="Wait Until Location Is" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="66">
<arguments repr="expected: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the current URL is &lt;code&gt;expected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;expected&lt;/code&gt; argument is the expected value in url.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the location is. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.0&lt;/p&gt;</doc>
<shortdoc>Waits until the current URL is ``expected``.</shortdoc>
</kw>
<kw name="Wait Until Location Is Not" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="95">
<arguments repr="location: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="location: str">
<name>location</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the current URL is not &lt;code&gt;location&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;location&lt;/code&gt; argument is the unexpected value in url.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the location is not. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; argument can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;New in SeleniumLibrary 4.3&lt;/p&gt;</doc>
<shortdoc>Waits until the current URL is not ``location``.</shortdoc>
</kw>
<kw name="Wait Until Page Contains" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="179">
<arguments repr="text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until &lt;code&gt;text&lt;/code&gt; appears on the current page.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the text appears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until ``text`` appears on the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Contains Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="223">
<arguments repr="locator: WebElement | None | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; appears on the current page.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the element appears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;limit&lt;/code&gt; argument can used to define how many elements the page should contain. When &lt;code&gt;limit&lt;/code&gt; is &lt;a href="#type-None" class="name"&gt;None&lt;/a&gt; (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;limit&lt;/code&gt; is new in SeleniumLibrary 4.4&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` appears on the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="201">
<arguments repr="text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until &lt;code&gt;text&lt;/code&gt; disappears from the current page.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the text disappears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;</doc>
<shortdoc>Waits until ``text`` disappears from the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain Element" source="/home/aszegedi/projects/robot_demo/.venv/lib/python3.11/site-packages/SeleniumLibrary/keywords/waiting.py" lineno="261">
<arguments repr="locator: WebElement | None | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | None | str">
<name>locator</name>
<type name="Union" union="true">WebElement | None | str<type name="WebElement">WebElement</type><type name="None" typedoc="None">None</type><type name="str" typedoc="string">str</type></type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">timedelta | None<type name="timedelta" typedoc="timedelta">timedelta</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Waits until the element &lt;code&gt;locator&lt;/code&gt; disappears from the current page.&lt;/p&gt;
&lt;p&gt;Fails if &lt;code&gt;timeout&lt;/code&gt; expires before the element disappears. See the &lt;span class="name"&gt;Timeouts&lt;/span&gt; section for more information about using timeouts and their default value and the &lt;a href="#Locating%20elements" class="name"&gt;Locating elements&lt;/a&gt; section for details about the locator syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error&lt;/code&gt; can be used to override the default error message.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;limit&lt;/code&gt; argument can used to define how many elements the page should not contain. When &lt;code&gt;limit&lt;/code&gt; is &lt;a href="#type-None" class="name"&gt;None&lt;/a&gt; (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;limit&lt;/code&gt; is new in SeleniumLibrary 4.4&lt;/p&gt;</doc>
<shortdoc>Waits until the element ``locator`` disappears from the current page.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="Any" type="Standard">
<doc>&lt;p&gt;Any value is accepted. No conversion is done.&lt;/p&gt;</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Open Browser</usage>
</usages>
</type>
<type name="boolean" type="Standard">
<doc>&lt;p&gt;Strings &lt;code&gt;TRUE&lt;/code&gt;, &lt;code&gt;YES&lt;/code&gt;, &lt;code&gt;ON&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are converted to Boolean &lt;code&gt;True&lt;/code&gt;, the empty string as well as strings &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;NO&lt;/code&gt;, &lt;code&gt;OFF&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; are converted to Boolean &lt;code&gt;False&lt;/code&gt;, and the string &lt;code&gt;NONE&lt;/code&gt; is converted to the Python &lt;code&gt;None&lt;/code&gt; object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;TRUE&lt;/code&gt; (converted to &lt;code&gt;True&lt;/code&gt;), &lt;code&gt;off&lt;/code&gt; (converted to &lt;code&gt;False&lt;/code&gt;), &lt;code&gt;example&lt;/code&gt; (used as-is)&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Add Cookie</usage>
<usage>Add Location Strategy</usage>
<usage>Click Button</usage>
<usage>Click Element</usage>
<usage>Click Image</usage>
<usage>Click Link</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Get Cookies</usage>
<usage>Get List Items</usage>
<usage>Get Window Size</usage>
<usage>Input Password</usage>
<usage>Input Text</usage>
<usage>Open Browser</usage>
<usage>Set Window Size</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>&lt;p&gt;Strings must be Python &lt;a href="https://docs.python.org/library/stdtypes.html#dict"&gt;dictionary&lt;/a&gt; literals. They are converted to actual dictionaries using the &lt;a href="https://docs.python.org/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt; function. They can contain any values &lt;code&gt;ast.literal_eval&lt;/code&gt; supports, including dictionaries and other containers.&lt;/p&gt;
&lt;p&gt;If the type has nested types like &lt;code&gt;dict[str, int]&lt;/code&gt;, items are converted to those types automatically. This in new in Robot Framework 6.0.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;{'a': 1, 'b': 2}&lt;/code&gt;, &lt;code&gt;{'key': 1, 'nested': {'key': 2}}&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Open Browser</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>&lt;p&gt;Conversion is done using Python's &lt;a href="https://docs.python.org/library/functions.html#int"&gt;int&lt;/a&gt; built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, &lt;code&gt;1.0&lt;/code&gt; is accepted and &lt;code&gt;1.1&lt;/code&gt; is not.&lt;/p&gt;
&lt;p&gt;Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0o&lt;/code&gt; and &lt;code&gt;0b&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;42&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0b1010&lt;/code&gt;, &lt;code&gt;10 000 000&lt;/code&gt;, &lt;code&gt;0xBAD_C0FFEE&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Click Element At Coordinates</usage>
<usage>Drag And Drop By Offset</usage>
<usage>Get Table Cell</usage>
<usage>Page Should Contain Element</usage>
<usage>Set Window Position</usage>
<usage>Set Window Size</usage>
<usage>Table Cell Should Contain</usage>
<usage>Table Column Should Contain</usage>
<usage>Table Row Should Contain</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>&lt;p&gt;Strings must be Python &lt;a href="https://docs.python.org/library/stdtypes.html#list"&gt;list&lt;/a&gt; literals. They are converted to actual lists using the &lt;a href="https://docs.python.org/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt; function. They can contain any values &lt;code&gt;ast.literal_eval&lt;/code&gt; supports, including lists and other containers.&lt;/p&gt;
&lt;p&gt;If the type has nested types like &lt;code&gt;list[int]&lt;/code&gt;, items are converted to those types automatically. This in new in Robot Framework 6.0.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;['one', 'two']&lt;/code&gt;, &lt;code&gt;[('one', 1), ('two', 2)]&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Switch Window</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>&lt;p&gt;String &lt;code&gt;NONE&lt;/code&gt; (case-insensitive) is converted to Python &lt;code&gt;None&lt;/code&gt; object. Other values cause an error.&lt;/p&gt;</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Cookie</usage>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Capture Element Screenshot</usage>
<usage>Create Webdriver</usage>
<usage>Element Attribute Value Should Be</usage>
<usage>Element Should Be Visible</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Be Visible</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Get Table Cell</usage>
<usage>Handle Alert</usage>
<usage>Input Text Into Alert</usage>
<usage>Location Should Be</usage>
<usage>Location Should Contain</usage>
<usage>Open Browser</usage>
<usage>Page Should Contain Button</usage>
<usage>Page Should Contain Checkbox</usage>
<usage>Page Should Contain Element</usage>
<usage>Page Should Contain Image</usage>
<usage>Page Should Contain Link</usage>
<usage>Page Should Contain List</usage>
<usage>Page Should Contain Radio Button</usage>
<usage>Page Should Contain Textfield</usage>
<usage>Page Should Not Contain Button</usage>
<usage>Page Should Not Contain Checkbox</usage>
<usage>Page Should Not Contain Element</usage>
<usage>Page Should Not Contain Image</usage>
<usage>Page Should Not Contain Link</usage>
<usage>Page Should Not Contain List</usage>
<usage>Page Should Not Contain Radio Button</usage>
<usage>Page Should Not Contain Textfield</usage>
<usage>Press Keys</usage>
<usage>Register Keyword To Run On Failure</usage>
<usage>Set Screenshot Directory</usage>
<usage>Submit Form</usage>
<usage>Switch Window</usage>
<usage>Table Cell Should Contain</usage>
<usage>Table Column Should Contain</usage>
<usage>Table Footer Should Contain</usage>
<usage>Table Header Should Contain</usage>
<usage>Table Row Should Contain</usage>
<usage>Table Should Contain</usage>
<usage>Textarea Should Contain</usage>
<usage>Textarea Value Should Be</usage>
<usage>Textfield Should Contain</usage>
<usage>Textfield Value Should Be</usage>
<usage>Title Should Be</usage>
<usage>Wait For Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>&lt;p&gt;All arguments are converted to Unicode strings.&lt;/p&gt;</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Cookie</usage>
<usage>Add Location Strategy</usage>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Assign Id To Element</usage>
<usage>Capture Element Screenshot</usage>
<usage>Capture Page Screenshot</usage>
<usage>Checkbox Should Be Selected</usage>
<usage>Checkbox Should Not Be Selected</usage>
<usage>Choose File</usage>
<usage>Clear Element Text</usage>
<usage>Click Button</usage>
<usage>Click Element</usage>
<usage>Click Element At Coordinates</usage>
<usage>Click Image</usage>
<usage>Click Link</usage>
<usage>Cover Element</usage>
<usage>Create Webdriver</usage>
<usage>Current Frame Should Contain</usage>
<usage>Current Frame Should Not Contain</usage>
<usage>Double Click Element</usage>
<usage>Drag And Drop</usage>
<usage>Drag And Drop By Offset</usage>
<usage>Element Attribute Value Should Be</usage>
<usage>Element Should Be Disabled</usage>
<usage>Element Should Be Enabled</usage>
<usage>Element Should Be Focused</usage>
<usage>Element Should Be Visible</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Be Visible</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Execute Async Javascript</usage>
<usage>Execute Javascript</usage>
<usage>Frame Should Contain</usage>
<usage>Get Cookie</usage>
<usage>Get Element Attribute</usage>
<usage>Get Element Count</usage>
<usage>Get Element Size</usage>
<usage>Get Horizontal Position</usage>
<usage>Get List Items</usage>
<usage>Get Locations</usage>
<usage>Get Selected List Label</usage>
<usage>Get Selected List Labels</usage>
<usage>Get Selected List Value</usage>
<usage>Get Selected List Values</usage>
<usage>Get Table Cell</usage>
<usage>Get Text</usage>
<usage>Get Value</usage>
<usage>Get Vertical Position</usage>
<usage>Get WebElement</usage>
<usage>Get WebElements</usage>
<usage>Get Window Handles</usage>
<usage>Get Window Identifiers</usage>
<usage>Get Window Names</usage>
<usage>Get Window Titles</usage>
<usage>Handle Alert</usage>
<usage>Input Password</usage>
<usage>Input Text</usage>
<usage>Input Text Into Alert</usage>
<usage>List Selection Should Be</usage>
<usage>List Should Have No Selections</usage>
<usage>Location Should Be</usage>
<usage>Location Should Contain</usage>
<usage>Log Source</usage>
<usage>Mouse Down</usage>
<usage>Mouse Down On Image</usage>
<usage>Mouse Down On Link</usage>
<usage>Mouse Out</usage>
<usage>Mouse Over</usage>
<usage>Mouse Up</usage>
<usage>Open Browser</usage>
<usage>Open Context Menu</usage>
<usage>Page Should Contain</usage>
<usage>Page Should Contain Button</usage>
<usage>Page Should Contain Checkbox</usage>
<usage>Page Should Contain Element</usage>
<usage>Page Should Contain Image</usage>
<usage>Page Should Contain Link</usage>
<usage>Page Should Contain List</usage>
<usage>Page Should Contain Radio Button</usage>
<usage>Page Should Contain Textfield</usage>
<usage>Page Should Not Contain</usage>
<usage>Page Should Not Contain Button</usage>
<usage>Page Should Not Contain Checkbox</usage>
<usage>Page Should Not Contain Element</usage>
<usage>Page Should Not Contain Image</usage>
<usage>Page Should Not Contain Link</usage>
<usage>Page Should Not Contain List</usage>
<usage>Page Should Not Contain Radio Button</usage>
<usage>Page Should Not Contain Textfield</usage>
<usage>Press Key</usage>
<usage>Press Keys</usage>
<usage>Radio Button Should Be Set To</usage>
<usage>Radio Button Should Not Be Selected</usage>
<usage>Register Keyword To Run On Failure</usage>
<usage>Remove Location Strategy</usage>
<usage>Scroll Element Into View</usage>
<usage>Select All From List</usage>
<usage>Select Checkbox</usage>
<usage>Select Frame</usage>
<usage>Select From List By Index</usage>
<usage>Select From List By Label</usage>
<usage>Select From List By Value</usage>
<usage>Select Radio Button</usage>
<usage>Set Focus To Element</usage>
<usage>Set Screenshot Directory</usage>
<usage>Simulate Event</usage>
<usage>Submit Form</usage>
<usage>Switch Browser</usage>
<usage>Switch Window</usage>
<usage>Table Cell Should Contain</usage>
<usage>Table Column Should Contain</usage>
<usage>Table Footer Should Contain</usage>
<usage>Table Header Should Contain</usage>
<usage>Table Row Should Contain</usage>
<usage>Table Should Contain</usage>
<usage>Textarea Should Contain</usage>
<usage>Textarea Value Should Be</usage>
<usage>Textfield Should Contain</usage>
<usage>Textfield Value Should Be</usage>
<usage>Title Should Be</usage>
<usage>Unselect All From List</usage>
<usage>Unselect Checkbox</usage>
<usage>Unselect From List By Index</usage>
<usage>Unselect From List By Label</usage>
<usage>Unselect From List By Value</usage>
<usage>Wait For Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="timedelta" type="Standard">
<doc>&lt;p&gt;Strings are expected to represent a time interval in one of the time formats Robot Framework supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a number representing seconds like &lt;code&gt;42&lt;/code&gt; or &lt;code&gt;10.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a time string like &lt;code&gt;1 hour 2 seconds&lt;/code&gt; or &lt;code&gt;1h 2s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a "timer" string like &lt;code&gt;01:02&lt;/code&gt; (1 minute 2 seconds) or &lt;code&gt;01:00:03&lt;/code&gt; (1 hour 3 seconds)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Integers and floats are considered to be seconds.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://robotframework.org/robotframework/"&gt;Robot Framework User Guide&lt;/a&gt; for more details about the supported time formats.&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
</accepts>
<usages>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Handle Alert</usage>
<usage>Input Text Into Alert</usage>
<usage>Set Action Chain Delay</usage>
<usage>Set Browser Implicit Wait</usage>
<usage>Set Selenium Implicit Wait</usage>
<usage>Set Selenium Page Load Timeout</usage>
<usage>Set Selenium Speed</usage>
<usage>Set Selenium Timeout</usage>
<usage>Wait For Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
</typedocs>
</keywordspec>
